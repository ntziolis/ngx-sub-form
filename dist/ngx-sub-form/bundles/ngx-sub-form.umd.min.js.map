{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-sub-form/lib/ngx-sub-form-tokens.ts","ng://ngx-sub-form/lib/ngx-sub-form-utils.ts","ng://ngx-sub-form/lib/ngx-sub-form.component.ts","ng://ngx-sub-form/lib/ngx-root-form.component.ts","ng://ngx-sub-form/lib/ngx-automatic-root-form.component.ts","ng://ngx-sub-form/lib/ngx-sub-form.decorators.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","SUB_FORM_COMPONENT_TOKEN","InjectionToken","wrapAsQuote","str","MissingFormControlsError","_super","missingFormControls","map","join","Error","time","obs","pipe","debounce","timer","NGX_SUB_FORM_HANDLE_VALUE_CHANGES_RATE_STRATEGIES","Éµ1","takeUntilDestroyed","component","source","onDestroy","Subject","previousOnDestroy","ngOnDestroy","apply","complete","takeUntil","isNullOrUndefined","obj","NgxSubFormComponent","_this","controlKeys","formGroup","FormGroup","_getFormControls","getFormGroupControlOptions","onChange","undefined","onTouched","emitNullOnDestroy","emitInitialValueOnInit","subscription","controlDisabled","defaultValues","getDefaultValues","reset","emitEvent","setTimeout","updateValueAndValidity","disable","controls","mapControls","ctrl","errors","_","isCtrlWithinFormArray","invalid","keys","assign","getFormControls","mapControl","filterControl","recursiveIfArray","formControls","control","FormArray","values","at","some","x","onFormUpdate","formUpdate","validate","valid","formGroupErrors","unsubscribe","writeValue","transformedValue","transformToFormGroup","missingKeys","getMissingKeys","handleFormArrayControls","fgDisabled","disabled","setValue","markAsPristine","markAsUntouched","entries","forEach","_a","_b","get","isArray","formArray","removeAt","formIsFormWithArrayControls","insert","createFormArrayControl","FormControl","reduce","handleEmissionRate","obs$","transformFromFormGroup","formValue","registerOnChange","fn","formValues","formControlNames","valueChanges","startWith","lastKeyEmitted$","merge","concat","__spread","delay","filter","withLatestFrom","index","keyLastEmit","subscribe","registerOnTouched","setDisabledState","shouldDisable","enable","Directive","NgxSubFormRemapComponent","NgxRootFormComponent","dataInput$","BehaviorSubject","_dataOutput$","dataValue","ngOnInit","data","onRegisterOnChangeHook","newValue","isEqual","tap","dataOutput","emit","dataInputUpdated","manualSave","Input","NgxAutomaticRootFormComponent","DataInputUsedOnWrongPropertyError","calledOnPropertyKey","propertyKey","set","dataInputValue","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\n// ----------------------------------------------------------------------------------------\r\n// no need to expose that token out of the lib, do not export that file from public_api.ts!\r\n// ----------------------------------------------------------------------------------------\r\n\r\n// see https://github.com/angular/angular/issues/8277#issuecomment-263029485\r\n// this basically allows us to access the host component\r\n// from a directive without knowing the type of the component at run time\r\nexport const SUB_FORM_COMPONENT_TOKEN = new InjectionToken<NgxSubFormComponent<any>>('NgxSubFormComponentToken');\r\n","import {\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR,\r\n  NG_VALIDATORS,\r\n  ValidationErrors,\r\n  FormControl,\r\n  FormArray,\r\n  AbstractControl,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport { InjectionToken, Type, forwardRef, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject, timer } from 'rxjs';\r\nimport { takeUntil, debounce } from 'rxjs/operators';\r\nimport { SUB_FORM_COMPONENT_TOKEN } from './ngx-sub-form-tokens';\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\nexport type Controls<T> = { [K in keyof T]-?: AbstractControl };\r\n\r\nexport type ControlsNames<T> = { [K in keyof T]-?: K };\r\n\r\nexport type ControlMap<T, V> = { [K in keyof T]-?: V };\r\n\r\nexport type ControlsType<T> = {\r\n  [K in keyof T]-?: T[K] extends any[] ? TypedFormArray<T[K]> : TypedFormControl<T[K]> | TypedFormGroup<T[K]>;\r\n};\r\n\r\nexport type FormErrorsType<T> = {\r\n  [K in keyof T]-?: T[K] extends any[] ? (null | ValidationErrors)[] : ValidationErrors;\r\n};\r\n\r\nexport type FormUpdate<FormInterface> = { [FormControlInterface in keyof FormInterface]?: true };\r\n\r\nexport type FormErrors<FormInterface> = null | Partial<\r\n  FormErrorsType<FormInterface> & {\r\n    formGroup?: ValidationErrors;\r\n  }\r\n>;\r\n\r\n// using set/patch value options signature from form controls to allow typing without additional casting\r\nexport interface TypedAbstractControl<TValue> extends AbstractControl {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  setValue(value: TValue, options?: Parameters<AbstractControl['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<AbstractControl['patchValue']>[1]): void;\r\n}\r\n\r\nexport interface TypedFormGroup<TValue> extends FormGroup {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  controls: ControlsType<TValue>;\r\n  setValue(value: TValue, options?: Parameters<FormGroup['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<FormGroup['patchValue']>[1]): void;\r\n  getRawValue(): TValue;\r\n}\r\n\r\nexport interface TypedFormArray<TValue extends any[]> extends FormArray {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  controls: TypedAbstractControl<TValue>[];\r\n  setValue(value: TValue, options?: Parameters<FormArray['setValue']>[1]): void;\r\n  patchValue(value: TValue, options?: Parameters<FormArray['patchValue']>[1]): void;\r\n  getRawValue(): TValue;\r\n}\r\n\r\nexport interface TypedFormControl<TValue> extends FormGroup {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  setValue(value: TValue, options?: Parameters<FormControl['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<FormControl['patchValue']>[1]): void;\r\n}\r\n\r\nexport type KeysWithType<T, V> = { [K in keyof T]: T[K] extends V ? K : never }[keyof T];\r\n\r\nexport type ArrayPropertyKey<T> = KeysWithType<T, Array<any>>;\r\n\r\nexport type ArrayPropertyValue<T, K extends ArrayPropertyKey<T> = ArrayPropertyKey<T>> = T[K] extends Array<infer U>\r\n  ? U\r\n  : never;\r\n\r\nexport function subformComponentProviders(\r\n  component: any,\r\n): {\r\n  provide: InjectionToken<ControlValueAccessor>;\r\n  useExisting: Type<any>;\r\n  multi?: boolean;\r\n}[] {\r\n  return [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => component),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => component),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: SUB_FORM_COMPONENT_TOKEN,\r\n      useExisting: forwardRef(() => component),\r\n    },\r\n  ];\r\n}\r\n\r\nconst wrapAsQuote = (str: string): string => `\"${str}\"`;\r\n\r\nexport class MissingFormControlsError<T extends string> extends Error {\r\n  constructor(missingFormControls: T[]) {\r\n    super(\r\n      `Attempt to update the form value with an object that doesn't contains some of the required form control keys.\\nMissing: ${missingFormControls\r\n        .map(wrapAsQuote)\r\n        .join(`, `)}`,\r\n    );\r\n  }\r\n}\r\n\r\nexport const NGX_SUB_FORM_HANDLE_VALUE_CHANGES_RATE_STRATEGIES = {\r\n  debounce: <T, U>(time: number): ReturnType<NgxSubFormComponent<T, U>['handleEmissionRate']> => obs =>\r\n    obs.pipe(debounce(() => timer(time))),\r\n};\r\n\r\n/**\r\n * Easily unsubscribe from an observable stream by appending `takeUntilDestroyed(this)` to the observable pipe.\r\n * If the component already has a `ngOnDestroy` method defined, it will call this first.\r\n * Note that the component *must* implement OnDestroy for this to work (the typings will enforce this anyway)\r\n */\r\nexport function takeUntilDestroyed<T>(component: OnDestroy): (source: Observable<T>) => Observable<T> {\r\n  return (source: Observable<T>): Observable<T> => {\r\n    const onDestroy = new Subject();\r\n    const previousOnDestroy = component.ngOnDestroy;\r\n\r\n    component.ngOnDestroy = () => {\r\n      if (previousOnDestroy) {\r\n        previousOnDestroy.apply(component);\r\n      }\r\n\r\n      onDestroy.next();\r\n      onDestroy.complete();\r\n    };\r\n\r\n    return source.pipe(takeUntil(onDestroy));\r\n  };\r\n}\r\n\r\n/** @internal */\r\nexport function isNullOrUndefined(obj: any): obj is null | undefined {\r\n  return obj === null || obj === undefined;\r\n}\r\n","import { OnDestroy, Directive, Component } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  AbstractControlOptions,\r\n  ControlValueAccessor,\r\n  FormGroup,\r\n  ValidationErrors,\r\n  Validator,\r\n  FormArray,\r\n  FormControl,\r\n} from '@angular/forms';\r\nimport { merge, Observable, Subscription } from 'rxjs';\r\nimport { delay, filter, map, startWith, withLatestFrom } from 'rxjs/operators';\r\nimport {\r\n  ControlMap,\r\n  Controls,\r\n  ControlsNames,\r\n  FormUpdate,\r\n  MissingFormControlsError,\r\n  FormErrors,\r\n  isNullOrUndefined,\r\n  ControlsType,\r\n  ArrayPropertyKey,\r\n  TypedAbstractControl,\r\n  TypedFormGroup,\r\n} from './ngx-sub-form-utils';\r\nimport { FormGroupOptions, NgxFormWithArrayControls, OnFormUpdate } from './ngx-sub-form.types';\r\n\r\ntype MapControlFunction<FormInterface, MapValue> = (\r\n  ctrl: TypedAbstractControl<any>,\r\n  key: keyof FormInterface,\r\n) => MapValue;\r\ntype FilterControlFunction<FormInterface> = (\r\n  ctrl: TypedAbstractControl<any>,\r\n  key: keyof FormInterface,\r\n  isCtrlWithinFormArray: boolean,\r\n) => boolean;\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxSubFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  implements ControlValueAccessor, Validator, OnDestroy, OnFormUpdate<FormInterface> {\r\n  public get formGroupControls(): ControlsType<FormInterface> {\r\n    // @note form-group-undefined we need the return null here because we do not want to expose the fact that\r\n    // the form can be undefined, it's handled internally to contain an Angular bug\r\n    if (!this.formGroup) {\r\n      return null as any;\r\n    }\r\n\r\n    return (this.formGroup.controls as unknown) as ControlsType<FormInterface>;\r\n  }\r\n\r\n  public get formGroupValues(): Required<FormInterface> {\r\n    // see @note form-group-undefined for non-null assertion reason\r\n    // tslint:disable-next-line:no-non-null-assertion\r\n    return this.mapControls(ctrl => ctrl.value)!;\r\n  }\r\n\r\n  public get formGroupErrors(): FormErrors<FormInterface> {\r\n    const errors: FormErrors<FormInterface> = this.mapControls<ValidationErrors | ValidationErrors[] | null>(\r\n      ctrl => ctrl.errors,\r\n      (ctrl, _, isCtrlWithinFormArray) => (isCtrlWithinFormArray ? true : ctrl.invalid),\r\n      true,\r\n    ) as FormErrors<FormInterface>;\r\n\r\n    if (!this.formGroup.errors && (!errors || !Object.keys(errors).length)) {\r\n      return null;\r\n    }\r\n\r\n    return Object.assign({}, this.formGroup.errors ? { formGroup: this.formGroup.errors } : {}, errors);\r\n  }\r\n\r\n  public get formControlNames(): ControlsNames<FormInterface> {\r\n    // see @note form-group-undefined for as syntax\r\n    return this.mapControls(\r\n      (_, key) => key,\r\n      () => true,\r\n      false,\r\n    ) as ControlsNames<FormInterface>;\r\n  }\r\n\r\n  private controlKeys: (keyof FormInterface)[] = [];\r\n\r\n  // when developing the lib it's a good idea to set the formGroup type\r\n  // to current + `| undefined` to catch a bunch of possible issues\r\n  // see @note form-group-undefined\r\n  public formGroup: TypedFormGroup<FormInterface> = (new FormGroup(\r\n    this._getFormControls(),\r\n    this.getFormGroupControlOptions() as AbstractControlOptions,\r\n  ) as unknown) as TypedFormGroup<FormInterface>;\r\n\r\n  protected onChange: Function | undefined = undefined;\r\n  protected onTouched: Function | undefined = undefined;\r\n  protected emitNullOnDestroy = true;\r\n  protected emitInitialValueOnInit = true;\r\n\r\n  private subscription: Subscription | undefined = undefined;\r\n\r\n  // a RootFormComponent with the disabled property set initially to `false`\r\n  // will call `setDisabledState` *before* the form is actually available\r\n  // and it wouldn't be disabled once available, therefore we use this flag\r\n  // to check when the FormGroup is created if we should disable it\r\n  private controlDisabled = false;\r\n\r\n  constructor() {\r\n    // if the form has default values, they should be applied straight away\r\n    const defaultValues: Partial<FormInterface> | null = this.getDefaultValues();\r\n    if (!!defaultValues) {\r\n      this.formGroup.reset(defaultValues, { emitEvent: false });\r\n    }\r\n\r\n    // `setTimeout` and `updateValueAndValidity` are both required here\r\n    // indeed, if you check the demo you'll notice that without it, if\r\n    // you select `Droid` and `Assassin` for example the displayed errors\r\n    // are not yet defined for the field `assassinDroid`\r\n    // (until you change one of the value in that form)\r\n    setTimeout(() => {\r\n      if (this.formGroup) {\r\n        this.formGroup.updateValueAndValidity({ emitEvent: false });\r\n\r\n        if (this.controlDisabled) {\r\n          this.formGroup.disable();\r\n        }\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  // can't define them directly\r\n  protected abstract getFormControls(): Controls<FormInterface>;\r\n  private _getFormControls(): Controls<FormInterface> {\r\n    const controls: Controls<FormInterface> = this.getFormControls();\r\n\r\n    this.controlKeys = (Object.keys(controls) as unknown) as (keyof FormInterface)[];\r\n\r\n    return controls;\r\n  }\r\n\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n    filterControl: FilterControlFunction<FormInterface>,\r\n    recursiveIfArray: boolean,\r\n  ): Partial<ControlMap<FormInterface, MapValue | MapValue[]>> | null;\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n  ): ControlMap<FormInterface, MapValue | MapValue[]> | null;\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n    filterControl: FilterControlFunction<FormInterface> = () => true,\r\n    recursiveIfArray: boolean = true,\r\n  ): Partial<ControlMap<FormInterface, MapValue | MapValue[]>> | null {\r\n    if (!this.formGroup) {\r\n      return null;\r\n    }\r\n\r\n    const formControls: ControlsType<FormInterface> = this.formGroup.controls;\r\n\r\n    const controls: Partial<ControlMap<FormInterface, MapValue | MapValue[]>> = {};\r\n\r\n    for (const key in formControls) {\r\n      if (this.formGroup.controls.hasOwnProperty(key)) {\r\n        const control = formControls[key];\r\n\r\n        if (recursiveIfArray && control instanceof FormArray) {\r\n          const values: MapValue[] = [];\r\n\r\n          for (let i = 0; i < control.length; i++) {\r\n            if (filterControl(control.at(i), key, true)) {\r\n              values.push(mapControl(control.at(i), key));\r\n            }\r\n          }\r\n\r\n          if (values.length > 0 && values.some(x => !isNullOrUndefined(x))) {\r\n            controls[key] = values;\r\n          }\r\n        } else if (control && filterControl(control, key, false)) {\r\n          controls[key] = mapControl(control, key);\r\n        }\r\n      }\r\n    }\r\n\r\n    return controls;\r\n  }\r\n\r\n  public onFormUpdate(formUpdate: FormUpdate<FormInterface>): void {}\r\n\r\n  /**\r\n   * Extend this method to provide custom local FormGroup level validation\r\n   */\r\n  protected getFormGroupControlOptions(): FormGroupOptions<FormInterface> {\r\n    return {};\r\n  }\r\n\r\n  public validate(): ValidationErrors | null {\r\n    if (\r\n      // @hack see where defining this.formGroup to undefined\r\n      !this.formGroup ||\r\n      this.formGroup.valid\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    return this.formGroupErrors;\r\n  }\r\n\r\n  // @todo could this be removed to avoid an override and just use `takeUntilDestroyed`?\r\n  public ngOnDestroy(): void {\r\n    // @hack there's a memory leak within Angular and those components\r\n    // are not correctly cleaned up which leads to error if a form is defined\r\n    // with validators and then it's been removed, the validator would still fail\r\n    // `as any` if because we do not want to define the formGroup as FormGroup | undefined\r\n    // everything related to undefined is handled internally and shouldn't be exposed to end user\r\n    (this.formGroup as any) = undefined;\r\n\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n\r\n    if (this.emitNullOnDestroy && this.onChange) {\r\n      this.onChange(null);\r\n    }\r\n\r\n    this.onChange = undefined;\r\n  }\r\n\r\n  // when getDefaultValues is defined, you do not need to specify the default values\r\n  // in your form (the ones defined within the `getFormControls` method)\r\n  protected getDefaultValues(): Partial<FormInterface> | null {\r\n    return null;\r\n  }\r\n\r\n  public writeValue(obj: Required<ControlInterface> | null): void {\r\n    // @hack see where defining this.formGroup to undefined\r\n    if (!this.formGroup) {\r\n      return;\r\n    }\r\n\r\n    const defaultValues: Partial<FormInterface> | null = this.getDefaultValues();\r\n\r\n    const transformedValue: FormInterface | null = this.transformToFormGroup(\r\n      obj === undefined ? null : obj,\r\n      defaultValues,\r\n    );\r\n\r\n    if (isNullOrUndefined(transformedValue)) {\r\n      this.formGroup.reset(\r\n        // calling `reset` on a form with `null` throws an error but if nothing is passed\r\n        // (undefined) it will reset all the form values to null (as expected)\r\n        defaultValues === null ? undefined : defaultValues,\r\n        // emit to keep internal and external information about data in of control in sync, when\r\n        // null/undefined was passed into writeValue\r\n        // while internally being replaced with defaultValues\r\n        { emitEvent: isNullOrUndefined(obj) && !isNullOrUndefined(defaultValues) },\r\n      );\r\n    } else {\r\n      const missingKeys: (keyof FormInterface)[] = this.getMissingKeys(transformedValue);\r\n      if (missingKeys.length > 0) {\r\n        throw new MissingFormControlsError(missingKeys as string[]);\r\n      }\r\n\r\n      this.handleFormArrayControls(transformedValue);\r\n\r\n      // The next few lines are weird but it's as workaround.\r\n      // There are some shady behavior with the disabled state\r\n      // of a form. Apparently, using `setValue` on a disabled\r\n      // form does re-enable it *sometimes*, not always.\r\n      // related issues:\r\n      // https://github.com/angular/angular/issues/31506\r\n      // https://github.com/angular/angular/issues/22556\r\n      // but if you display `this.formGroup.disabled`\r\n      // before and after the `setValue` is called, it's the same\r\n      // result which is even weirder\r\n      const fgDisabled: boolean = this.formGroup.disabled;\r\n\r\n      this.formGroup.setValue(transformedValue, {\r\n        // emit to keep internal and external information about data in of control in sync, when\r\n        // null/undefined was passed into writeValue\r\n        // while internally being replaced with transformedValue\r\n        emitEvent: isNullOrUndefined(obj),\r\n      });\r\n\r\n      if (fgDisabled) {\r\n        this.formGroup.disable();\r\n      }\r\n    }\r\n\r\n    this.formGroup.markAsPristine();\r\n    this.formGroup.markAsUntouched();\r\n  }\r\n\r\n  private handleFormArrayControls(obj: any) {\r\n    Object.entries(obj).forEach(([key, value]) => {\r\n      if (this.formGroup.get(key) instanceof FormArray && Array.isArray(value)) {\r\n        const formArray: FormArray = this.formGroup.get(key) as FormArray;\r\n\r\n        // instead of creating a new array every time and push a new FormControl\r\n        // we just remove or add what is necessary so that:\r\n        // - it is as efficient as possible and do not create unnecessary FormControl every time\r\n        // - validators are not destroyed/created again and eventually fire again for no reason\r\n        while (formArray.length > value.length) {\r\n          formArray.removeAt(formArray.length - 1);\r\n        }\r\n\r\n        for (let i = formArray.length; i < value.length; i++) {\r\n          if (this.formIsFormWithArrayControls()) {\r\n            formArray.insert(i, this.createFormArrayControl(key as ArrayPropertyKey<FormInterface>, value[i]));\r\n          } else {\r\n            formArray.insert(i, new FormControl(value[i]));\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private formIsFormWithArrayControls(): this is NgxFormWithArrayControls<FormInterface> {\r\n    return typeof ((this as unknown) as NgxFormWithArrayControls<FormInterface>).createFormArrayControl === 'function';\r\n  }\r\n\r\n  private getMissingKeys(transformedValue: FormInterface | null) {\r\n    // `controlKeys` can be an empty array, empty forms are allowed\r\n    const missingKeys: (keyof FormInterface)[] = this.controlKeys.reduce((keys, key) => {\r\n      if (isNullOrUndefined(transformedValue) || transformedValue[key] === undefined) {\r\n        keys.push(key);\r\n      }\r\n\r\n      return keys;\r\n    }, [] as (keyof FormInterface)[]);\r\n\r\n    return missingKeys;\r\n  }\r\n\r\n  // when customizing the emission rate of your sub form component, remember not to **mutate** the stream\r\n  // it is safe to throttle, debounce, delay, etc but using skip, first, last or mutating data inside\r\n  // the stream will cause issues!\r\n  protected handleEmissionRate(): (obs$: Observable<FormInterface>) => Observable<FormInterface> {\r\n    return obs$ => obs$;\r\n  }\r\n\r\n  // that method can be overridden if the\r\n  // shape of the form needs to be modified\r\n  protected transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null {\r\n    return (obj as any) as FormInterface;\r\n  }\r\n\r\n  // that method can be overridden if the\r\n  // shape of the form needs to be modified\r\n  protected transformFromFormGroup(formValue: FormInterface): ControlInterface | null {\r\n    return (formValue as any) as ControlInterface;\r\n  }\r\n\r\n  public registerOnChange(fn: (_: any) => void): void {\r\n    if (!this.formGroup) {\r\n      return;\r\n    }\r\n\r\n    this.onChange = fn;\r\n\r\n    interface KeyValueForm {\r\n      key: keyof FormInterface;\r\n      value: unknown;\r\n    }\r\n\r\n    const formControlNames: (keyof FormInterface)[] = Object.keys(this.formControlNames) as (keyof FormInterface)[];\r\n\r\n    const formValues: Observable<KeyValueForm>[] = formControlNames.map(key =>\r\n      ((this.formGroup.controls[key] as unknown) as AbstractControl).valueChanges.pipe(\r\n        startWith(this.formGroup.controls[key].value),\r\n        map(value => ({ key, value })),\r\n      ),\r\n    );\r\n\r\n    const lastKeyEmitted$: Observable<keyof FormInterface> = merge(...formValues.map(obs => obs.pipe(map(x => x.key))));\r\n\r\n    this.subscription = this.formGroup.valueChanges\r\n      .pipe(\r\n        // hook to give access to the observable for sub-classes\r\n        // this allow sub-classes (for example) to debounce, throttle, etc\r\n        this.handleEmissionRate(),\r\n        startWith(this.formGroup.value),\r\n        // this is required otherwise an `ExpressionChangedAfterItHasBeenCheckedError` will happen\r\n        // this is due to the fact that parent component will define a given state for the form that might\r\n        // be changed once the children are being initialized\r\n        delay(0),\r\n        filter(() => !!this.formGroup),\r\n        // detect which stream emitted last\r\n        withLatestFrom(lastKeyEmitted$),\r\n        map(([_, keyLastEmit], index) => {\r\n          if (index > 0 && this.onTouched) {\r\n            this.onTouched();\r\n          }\r\n\r\n          if (index > 0 || (index === 0 && this.emitInitialValueOnInit)) {\r\n            if (this.onChange) {\r\n              this.onChange(\r\n                this.transformFromFormGroup(\r\n                  // do not use the changes passed by `this.formGroup.valueChanges` here\r\n                  // as we've got a delay(0) above, on the next tick the form data might\r\n                  // be outdated and might result into an inconsistent state where a form\r\n                  // state is valid (base on latest value) but the previous value\r\n                  // (the one passed by `this.formGroup.valueChanges` would be the previous one)\r\n                  this.formGroup.value,\r\n                ),\r\n              );\r\n            }\r\n\r\n            const formUpdate: FormUpdate<FormInterface> = {};\r\n            formUpdate[keyLastEmit] = true;\r\n            this.onFormUpdate(formUpdate);\r\n          }\r\n        }),\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public setDisabledState(shouldDisable: boolean | undefined): void {\r\n    this.controlDisabled = !!shouldDisable;\r\n\r\n    if (!this.formGroup) {\r\n      return;\r\n    }\r\n\r\n    if (shouldDisable) {\r\n      this.formGroup.disable({ emitEvent: false });\r\n    } else {\r\n      this.formGroup.enable({ emitEvent: false });\r\n    }\r\n  }\r\n}\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxSubFormRemapComponent<ControlInterface, FormInterface> extends NgxSubFormComponent<\r\n  ControlInterface,\r\n  FormInterface\r\n> {\r\n  protected abstract transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null;\r\n  protected abstract transformFromFormGroup(formValue: FormInterface): ControlInterface | null;\r\n}\r\n","import { EventEmitter, OnInit, Input, Component, Directive } from '@angular/core';\r\nimport isEqual from 'fast-deep-equal';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { NgxSubFormRemapComponent } from './ngx-sub-form.component';\r\nimport { takeUntilDestroyed, isNullOrUndefined } from './ngx-sub-form-utils';\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxRootFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  extends NgxSubFormRemapComponent<ControlInterface, FormInterface>\r\n  implements OnInit {\r\n  public abstract dataInput: Required<ControlInterface> | null | undefined;\r\n  // `Input` values are set while the `ngOnChanges` hook is ran\r\n  // and it does happen before the `ngOnInit` where we start\r\n  // listening to `dataInput$`. Therefore, it cannot be a `Subject`\r\n  // or we will miss the first value\r\n  protected dataInput$: BehaviorSubject<Required<ControlInterface> | null | undefined> = new BehaviorSubject<\r\n    Required<ControlInterface> | null | undefined\r\n  >(null);\r\n\r\n  public abstract dataOutput: EventEmitter<ControlInterface>;\r\n  // using a private variable `_dataOutput$` to be able to control the\r\n  // emission rate with a debounce or throttle for ex\r\n  /** @internal */\r\n  protected _dataOutput$: Subject<ControlInterface> = new Subject();\r\n\r\n  @Input()\r\n  public set disabled(shouldDisable: boolean | undefined) {\r\n    this.setDisabledState(shouldDisable);\r\n  }\r\n\r\n  protected emitInitialValueOnInit = false;\r\n  protected emitNullOnDestroy = false;\r\n\r\n  protected dataValue: ControlInterface | null = null;\r\n\r\n  public ngOnInit(): void {\r\n    // we need to manually call registerOnChange because that function\r\n    // handles most of the logic from NgxSubForm and when it's called\r\n    // as a ControlValueAccessor that function is called by Angular itself\r\n    this.registerOnChange(data => this.onRegisterOnChangeHook(data));\r\n\r\n    this.dataInput$\r\n      .pipe(\r\n        filter(newValue => !isEqual(newValue, this.formGroup.value)),\r\n        tap(newValue => {\r\n          if (!isNullOrUndefined(newValue)) {\r\n            this.writeValue(newValue);\r\n          }\r\n        }),\r\n        takeUntilDestroyed(this),\r\n      )\r\n      .subscribe();\r\n\r\n    this._dataOutput$\r\n      .pipe(\r\n        filter(() => this.formGroup.valid),\r\n        tap(value => this.dataOutput.emit(value)),\r\n        takeUntilDestroyed(this),\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /** @internal */\r\n  protected onRegisterOnChangeHook(data: ControlInterface | null): boolean {\r\n    if (this.formGroup.invalid || isEqual(data, this.dataInput$.value)) {\r\n      return false;\r\n    }\r\n\r\n    this.dataValue = data;\r\n    return true;\r\n  }\r\n\r\n  // called by the DataInput decorator\r\n  /** @internal */\r\n  public dataInputUpdated(data: Required<ControlInterface> | null | undefined): void {\r\n    this.dataInput$.next(data);\r\n  }\r\n\r\n  public writeValue(obj: Required<ControlInterface> | null): void {\r\n    this.dataValue = obj;\r\n    super.writeValue(obj);\r\n  }\r\n\r\n  protected transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null {\r\n    return (obj as unknown) as FormInterface;\r\n  }\r\n\r\n  protected transformFromFormGroup(formValue: FormInterface): ControlInterface | null {\r\n    return (formValue as unknown) as ControlInterface;\r\n  }\r\n\r\n  public manualSave(): void {\r\n    if (!isNullOrUndefined(this.dataValue) && this.formGroup.valid) {\r\n      this._dataOutput$.next(this.dataValue);\r\n    }\r\n  }\r\n}\r\n","import { OnInit, Directive } from '@angular/core';\r\nimport { NgxRootFormComponent } from './ngx-root-form.component';\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxAutomaticRootFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  extends NgxRootFormComponent<ControlInterface, FormInterface>\r\n  implements OnInit {\r\n  /** @internal */\r\n  protected onRegisterOnChangeHook(data: ControlInterface | null) {\r\n    if (!super.onRegisterOnChangeHook(data)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.formGroup) {\r\n      this.formGroup.markAsPristine();\r\n\r\n      if (this.formGroup.valid) {\r\n        this.manualSave();\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { NgxRootFormComponent } from './ngx-root-form.component';\r\n\r\nexport class DataInputUsedOnWrongPropertyError extends Error {\r\n  constructor(calledOnPropertyKey: string) {\r\n    super(\r\n      `You're trying to apply the \"DataInput\" decorator on a property called \"${calledOnPropertyKey}\". That decorator should only be used on a property called \"dataInput\"`,\r\n    );\r\n  }\r\n}\r\n\r\nexport function DataInput() {\r\n  return function<ControlInterface, FormInterface = ControlInterface>(\r\n    target: NgxRootFormComponent<ControlInterface, FormInterface>,\r\n    propertyKey: string,\r\n  ) {\r\n    if (propertyKey !== 'dataInput') {\r\n      throw new DataInputUsedOnWrongPropertyError(propertyKey);\r\n    }\r\n\r\n    Object.defineProperty(target, propertyKey, {\r\n      set: function(dataInputValue) {\r\n        (this as NgxRootFormComponent<ControlInterface, FormInterface>).dataInputUpdated(dataInputValue);\r\n      },\r\n    });\r\n  };\r\n}\r\n"]}