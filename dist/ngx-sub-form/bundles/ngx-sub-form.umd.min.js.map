{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-sub-form/lib/ngx-sub-form-tokens.ts","ng://ngx-sub-form/lib/ngx-sub-form-utils.ts","ng://ngx-sub-form/lib/sub-form-group.ts","ng://ngx-sub-form/lib/abstract-control-utils.ts","ng://ngx-sub-form/lib/ngx-sub-form.component.ts","ng://ngx-sub-form/lib/ngx-root-form.component.ts","ng://ngx-sub-form/lib/ngx-automatic-root-form.component.ts","ng://ngx-sub-form/lib/sub-form.directive.ts","ng://ngx-sub-form/lib/ngx-sub-form.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","SUB_FORM_COMPONENT_TOKEN","InjectionToken","wrapAsQuote","str","MissingFormControlsError","_super","missingFormControls","map","join","Error","time","obs","pipe","debounce","timer","NGX_SUB_FORM_HANDLE_VALUE_CHANGES_RATE_STRATEGIES","Éµ1","takeUntilDestroyed","component","source","onDestroy","Subject","previousOnDestroy","ngOnDestroy","complete","takeUntil","isNullOrUndefined","obj","CustomEventEmitter","setSubForm","subForm","_this","transformToFormGroup","defaultValues","transformFromFormGroup","getDefaultValues","emit","transformedValue","EventEmitter","SubFormGroup","validatorOrOpts","asyncValidator","isRoot","controlValue","undefined","_valueChanges","valueChanges","parentValidatorOrOpts","parentAsyncValidator","setChangeDetector","cd","root","getRawValue","rawValue","setValue","options","handleFormArrayControls","patchValue","reset","isArray","formValue","updateValue","_b","entries","formGroup","controls","_c","_d","control","parent","FormGroup","patchFormControl","subFormGroup","patchableControl","isPatched","setValue_1","bind","SubFormArray","removeAt","index","FormArray","normalizeValidator","validator","validate","normalizeAsyncValidator","isOptionsObj","coerceToValidator","validators","Validators","compose","coerceToAsyncValidator","origAsyncValidator","asyncValidators","composeAsync","NgxSubFormComponent","emitNullOnDestroy","emitInitialValueOnInit","ngOnChangesWasCalled","mapControls","_","ngOnChanges","changes","keys","forEach","removeControl","getFormControls","FormControl","addControl","getFormGroupControlOptions","updateOn","_setUpdateStrategy","setValidators","setAsyncValidators","mergedValues","onlySelf","emitEvent","ngAfterContentChecked","markForCheck","detectChanges","mapControl","filterControl","recursiveIfArray","formControls","values","at","some","x","_a","get","formArray","formIsFormWithArrayControls","insert","createFormArrayControl","handleEmissionRate","obs$","Input","Directive","NgxSubFormRemapComponent","NgxRootFormComponent","_dataOutput$","dataValue","ngOnInit","filter","valid","tap","dataOutput","subscribe","onRegisterOnChangeHook","data","invalid","isEqual","dataInput","manualSave","ChangeDetectorRef","NgxAutomaticRootFormComponent","status$","statusChanges","startWith","status","value$","combineLatest","SubFormDirective","selector","NgxSubFormModule","NgModule","declarations","imports","CommonModule","exports","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\n// ----------------------------------------------------------------------------------------\r\n// no need to expose that token out of the lib, do not export that file from public_api.ts!\r\n// ----------------------------------------------------------------------------------------\r\n\r\n// see https://github.com/angular/angular/issues/8277#issuecomment-263029485\r\n// this basically allows us to access the host component\r\n// from a directive without knowing the type of the component at run time\r\nexport const SUB_FORM_COMPONENT_TOKEN = new InjectionToken<NgxSubFormComponent<any>>('NgxSubFormComponentToken');\r\n","import { forwardRef, OnDestroy, Provider } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n} from '@angular/forms';\r\nimport { Observable, Subject, timer } from 'rxjs';\r\nimport { debounce, takeUntil } from 'rxjs/operators';\r\n\r\nimport { SUB_FORM_COMPONENT_TOKEN } from './ngx-sub-form-tokens';\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\nexport type Controls<T> = { [K in keyof T]-?: AbstractControl };\r\n\r\nexport type ControlsNames<T> = { [K in keyof T]-?: K };\r\n\r\nexport type ControlMap<T, V> = { [K in keyof T]-?: V };\r\n\r\nexport type ControlsType<T> = {\r\n  [K in keyof T]-?: T[K] extends any[] ? TypedFormArray<T[K]> : TypedFormControl<T[K]> | TypedFormGroup<T[K]>;\r\n};\r\n\r\nexport type FormErrorsType<T> = {\r\n  [K in keyof T]-?: T[K] extends any[] ? (null | ValidationErrors)[] : ValidationErrors;\r\n};\r\n\r\nexport type FormUpdate<FormInterface> = { [FormControlInterface in keyof FormInterface]?: true };\r\n\r\nexport type FormErrors<FormInterface> = null | Partial<\r\n  FormErrorsType<FormInterface> & {\r\n    formGroup?: ValidationErrors;\r\n  }\r\n>;\r\n\r\n// using set/patch value options signature from form controls to allow typing without additional casting\r\nexport interface TypedAbstractControl<TValue> extends AbstractControl {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  setValue(value: TValue, options?: Parameters<AbstractControl['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<AbstractControl['patchValue']>[1]): void;\r\n}\r\n\r\nexport interface TypedFormGroup<TValue> extends FormGroup {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  controls: ControlsType<TValue>;\r\n  setValue(value: TValue, options?: Parameters<FormGroup['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<FormGroup['patchValue']>[1]): void;\r\n  getRawValue(): TValue;\r\n}\r\n\r\nexport interface TypedFormArray<TValue extends any[]> extends FormArray {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  controls: TypedAbstractControl<TValue>[];\r\n  setValue(value: TValue, options?: Parameters<FormArray['setValue']>[1]): void;\r\n  patchValue(value: TValue, options?: Parameters<FormArray['patchValue']>[1]): void;\r\n  getRawValue(): TValue;\r\n}\r\n\r\nexport interface TypedFormControl<TValue> extends FormGroup {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  setValue(value: TValue, options?: Parameters<FormControl['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<FormControl['patchValue']>[1]): void;\r\n}\r\n\r\nexport type KeysWithType<T, V> = { [K in keyof T]: T[K] extends V ? K : never }[keyof T];\r\n\r\nexport type ArrayPropertyKey<T> = KeysWithType<T, Array<any>>;\r\n\r\nexport type ArrayPropertyValue<T, K extends ArrayPropertyKey<T> = ArrayPropertyKey<T>> = T[K] extends Array<infer U>\r\n  ? U\r\n  : never;\r\n\r\nexport function subformComponentProviders(component: any): Provider[] {\r\n  return [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => component),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => component),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: SUB_FORM_COMPONENT_TOKEN,\r\n      useExisting: forwardRef(() => component),\r\n    },\r\n  ];\r\n}\r\n\r\nconst wrapAsQuote = (str: string): string => `\"${str}\"`;\r\n\r\nexport class MissingFormControlsError<T extends string> extends Error {\r\n  constructor(missingFormControls: T[]) {\r\n    super(\r\n      `Attempt to update the form value with an object that doesn't contains some of the required form control keys.\\nMissing: ${missingFormControls\r\n        .map(wrapAsQuote)\r\n        .join(`, `)}`,\r\n    );\r\n  }\r\n}\r\n\r\nexport const NGX_SUB_FORM_HANDLE_VALUE_CHANGES_RATE_STRATEGIES = {\r\n  debounce: <T, U>(time: number): ReturnType<NgxSubFormComponent<T, U>['handleEmissionRate']> => obs =>\r\n    obs.pipe(debounce(() => timer(time))),\r\n};\r\n\r\n/**\r\n * Easily unsubscribe from an observable stream by appending `takeUntilDestroyed(this)` to the observable pipe.\r\n * If the component already has a `ngOnDestroy` method defined, it will call this first.\r\n * Note that the component *must* implement OnDestroy for this to work (the typings will enforce this anyway)\r\n */\r\nexport function takeUntilDestroyed<T>(component: OnDestroy): (source: Observable<T>) => Observable<T> {\r\n  return (source: Observable<T>): Observable<T> => {\r\n    const onDestroy = new Subject();\r\n    const previousOnDestroy = component.ngOnDestroy;\r\n\r\n    component.ngOnDestroy = () => {\r\n      if (previousOnDestroy) {\r\n        previousOnDestroy.apply(component);\r\n      }\r\n\r\n      onDestroy.next();\r\n      onDestroy.complete();\r\n    };\r\n\r\n    return source.pipe(takeUntil(onDestroy));\r\n  };\r\n}\r\n\r\n/** @internal */\r\nexport function isNullOrUndefined(obj: any): obj is null | undefined {\r\n  return obj === null || obj === undefined;\r\n}\r\n","import { EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport {\r\n  AbstractControlOptions,\r\n  AsyncValidatorFn,\r\n  FormGroup,\r\n  ValidatorFn,\r\n  FormControl,\r\n  FormArray,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\n\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\nclass CustomEventEmitter<TControl, TForm = TControl> extends EventEmitter<TControl> {\r\n  private subForm!: NgxSubFormComponent<TControl, TForm>;\r\n  private transformToFormGroup!: NgxSubFormComponent<TControl, TForm>['transformToFormGroup'];\r\n  private transformFromFormGroup!: NgxSubFormComponent<TControl, TForm>['transformFromFormGroup'];\r\n  private getDefaultValues!: NgxSubFormComponent<TControl, TForm>['getDefaultValues'];\r\n\r\n  setSubForm(subForm: NgxSubFormComponent<TControl, TForm>) {\r\n    this.subForm = subForm;\r\n\r\n    this.transformToFormGroup = (obj: TControl | null, defaultValues: Partial<TForm>) => {\r\n      return this.subForm['transformToFormGroup'](obj, defaultValues) || ({} as TForm);\r\n    };\r\n    this.transformFromFormGroup = this.subForm['transformFromFormGroup'];\r\n    this.getDefaultValues = this.subForm['getDefaultValues'];\r\n  }\r\n\r\n  emit(value?: TControl): void {\r\n    // all those would happen while the sub-form tree is still being initalized\r\n    // we can safely ignore all emits until subForm is set\r\n    // since in ngOnInit of sub-form-component base class we call reset with the intial values\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    const transformedValue = (this.transformToFormGroup((value as any) as TControl | null, {}) as unknown) as TControl;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    // this.subForm.handleFormArrayControls(transformedValue);\r\n\r\n    return super.emit(transformedValue);\r\n  }\r\n}\r\n\r\nexport class SubFormGroup<TControl, TForm = TControl> extends FormGroup {\r\n  private subForm!: NgxSubFormComponent<TControl, TForm>;\r\n\r\n  public cd: ChangeDetectorRef | undefined;\r\n  private isRoot = false;\r\n  private _valueChanges: CustomEventEmitter<TControl, TForm>;\r\n  public controlValue!: TControl;\r\n  private transformToFormGroup!: NgxSubFormComponent<TControl, TForm>['transformToFormGroup'];\r\n  private transformFromFormGroup!: NgxSubFormComponent<TControl, TForm>['transformFromFormGroup'];\r\n  private getDefaultValues!: NgxSubFormComponent<TControl, TForm>['getDefaultValues'];\r\n\r\n  public readonly parentValidatorOrOpts: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null | undefined;\r\n  public readonly parentAsyncValidator: AsyncValidatorFn | AsyncValidatorFn[] | null | undefined;\r\n\r\n  constructor(\r\n    value: Partial<TControl> | null,\r\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\r\n    //@Optional() @Inject(SUB_FORM_COMPONENT_TOKEN) public parentSubForm?: NgxSubFormComponent<any>,\r\n  ) {\r\n    // its important to NOT set validators here as this will trigger calls to value before setSubForm was called\r\n    super({});\r\n\r\n    // this is how to overwrite a propetotype property\r\n    //   Object.defineProperty(foo, \"bar\", {\r\n    //     // only returns odd die sides\r\n    //     get: function () { return (Math.random() * 6) | 1; }\r\n    // });\r\n\r\n    this.controlValue = (value || undefined) as TControl;\r\n\r\n    this._valueChanges = new CustomEventEmitter();\r\n\r\n    (this.valueChanges as any) = this._valueChanges;\r\n\r\n    this.parentValidatorOrOpts = validatorOrOpts;\r\n    this.parentAsyncValidator = asyncValidator;\r\n  }\r\n\r\n  setChangeDetector(cd: ChangeDetectorRef) {\r\n    this.cd = cd;\r\n  }\r\n\r\n  get value() {\r\n    // if (!this.subForm) {\r\n    //   return null;\r\n    // }\r\n\r\n    // const transformedValue = (this.transformFromFormGroup(\r\n    //   (super.value as any) as TForm,\r\n    // ) as unknown) as TControl;\r\n    // return transformedValue;\r\n\r\n    return this.controlValue;\r\n  }\r\n\r\n  set value(value: any) {\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    const transformedValue = (this.transformToFormGroup((value as unknown) as TControl, {}) as unknown) as TForm;\r\n\r\n    // TODO rethink as this might not work as we want it, we might not even need this anymore\r\n    // @ts-ignore\r\n    (super.value as any) = transformedValue;\r\n\r\n    this.controlValue = value;\r\n  }\r\n\r\n  setSubForm(subForm: NgxSubFormComponent<TControl, TForm>) {\r\n    this.subForm = subForm;\r\n    this._valueChanges.setSubForm(subForm);\r\n\r\n    if (this.root === this) {\r\n      this.isRoot = true;\r\n    }\r\n\r\n    // transform to form group should never return null / undefined but {} instead\r\n    this.transformToFormGroup = (obj: TControl | null, defaultValues: Partial<TForm>) => {\r\n      return this.subForm['transformToFormGroup'](obj, defaultValues) || ({} as TForm);\r\n    };\r\n    this.transformFromFormGroup = this.subForm['transformFromFormGroup'];\r\n    this.getDefaultValues = this.subForm['getDefaultValues'];\r\n  }\r\n\r\n  getRawValue(): any {\r\n    const rawValue = super.getRawValue();\r\n    return this.transformFromFormGroup(rawValue);\r\n  }\r\n\r\n  setValue(value: TControl, options: { onlySelf?: boolean; emitEvent?: boolean } = {}): void {\r\n    // this happens when the parent sets a value but the sub-form-component has not tun ngOnInit yet\r\n    if (!this.subForm) {\r\n      if (value) {\r\n        this.controlValue = value;\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.controlValue = { ...this.controlValue, ...value };\r\n\r\n    // TODO check if providing {} does work, as we do not want to override existing values with default values\r\n    // It might be that patchValue cannot be used as we dont have control over how transformToFormGroup is implemented\r\n    // it would have to be done in a way that returns a partial TForm which right now is not how the method signatures are defined\r\n    const transformedValue = (this.transformToFormGroup((value as unknown) as TControl, {}) as unknown) as TForm;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    this.subForm.handleFormArrayControls(this.controlValue);\r\n\r\n    super.patchValue(transformedValue, options);\r\n  }\r\n\r\n  patchValue(value: Partial<TControl>, options: { onlySelf?: boolean; emitEvent?: boolean } = {}): void {\r\n    // this happens when the parent sets a value but the sub-form-component has not tun ngOnInit yet\r\n    if (!this.subForm) {\r\n      if (value) {\r\n        this.controlValue = value as TControl;\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.controlValue = { ...this.controlValue, ...value };\r\n\r\n    // TODO check if providing {} does work, as we do not want to override existing values with default values\r\n    // It might be that patchValue cannot be used as we dont have control over how transformToFormGroup is implemented\r\n    // it would have to be done in a way that returns a partial TForm which right now is not how the method signatures are defined\r\n    const transformedValue = (this.transformToFormGroup((value as unknown) as TControl, {}) as unknown) as TForm;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    this.subForm.handleFormArrayControls(this.controlValue);\r\n\r\n    super.patchValue(transformedValue, options);\r\n  }\r\n\r\n  reset(value: Partial<TControl> = {}, options: { onlySelf?: boolean; emitEvent?: boolean } = {}): void {\r\n    // reset is triggered from parent when formgroup is created\r\n    // then again from sub-form inside ngOnInit after subForm was set\r\n    // so when can safely ignore resets prior to subForm being set\r\n    if (!this.subForm) {\r\n      if (value) {\r\n        this.controlValue = value as TControl;\r\n      }\r\n      return;\r\n    }\r\n\r\n    // special handling for array sub-forms\r\n    if (Array.isArray(value)) {\r\n      this.controlValue = (value || []) as any;\r\n    } else {\r\n      this.controlValue = { ...this.controlValue, ...value };\r\n    }\r\n\r\n    const formValue = (this.transformToFormGroup(\r\n      (value as unknown) as TControl,\r\n      this.getDefaultValues(),\r\n    ) as unknown) as TForm;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    this.subForm.handleFormArrayControls(this.controlValue);\r\n\r\n    super.reset(formValue, options);\r\n\r\n    // const controlValue = (this.transformFromFormGroup((value as unknown) as TForm) as unknown) as TControl;\r\n  }\r\n\r\n  updateValue(options: any) {\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    const formValue = {} as any;\r\n    for (const [key, value] of Object.entries(this.subForm.formGroup.controls)) {\r\n      const control = value as AbstractControl;\r\n      if (control instanceof SubFormGroup) {\r\n        formValue[key] = control.controlValue;\r\n      } else {\r\n        formValue[key] = control.value;\r\n      }\r\n    }\r\n\r\n    const controlValue = (this.transformFromFormGroup(formValue || ({} as TForm)) as unknown) as TControl;\r\n\r\n    this.controlValue = controlValue;\r\n\r\n    if (this.isRoot) {\r\n      return;\r\n    }\r\n\r\n    let parentSubFromGroup: any;\r\n    // if (this.parent instanceof FormArray) {\r\n    //   parentSubFromGroup = this.parent.parent;\r\n    // } else {\r\n    parentSubFromGroup = this.parent;\r\n    //}\r\n\r\n    if (!parentSubFromGroup) {\r\n      debugger;\r\n    }\r\n\r\n    parentSubFromGroup.updateValue(options);\r\n    //this.updateValueAndValidity(options);\r\n  }\r\n}\r\n\r\n// this idea of this is that when a non sub form group is being updated the sub form group needs to be notifed\r\nexport function patchFormControl<TControl, TForm>(subFormGroup: SubFormGroup<TControl, TForm>, control: FormControl) {\r\n  const patchableControl = control as FormControl & { isPatched: boolean };\r\n\r\n  if (!patchableControl.isPatched) {\r\n    const setValue = patchableControl.setValue.bind(patchableControl);\r\n    patchableControl.setValue = (value: any, options: any) => {\r\n      setValue(value, options);\r\n      subFormGroup.updateValue(options);\r\n    };\r\n    patchableControl.isPatched = true;\r\n  }\r\n}\r\n\r\nexport class SubFormArray<TControl, TForm = TControl> extends FormArray {\r\n  private subForm!: NgxSubFormComponent<TControl, TForm>;\r\n\r\n  private isRoot = false;\r\n  private _valueChanges: CustomEventEmitter<TControl, TForm>;\r\n  public controlValue!: TControl[];\r\n  private transformToFormGroup!: NgxSubFormComponent<TControl, TForm>['transformToFormGroup'];\r\n  private transformFromFormGroup!: NgxSubFormComponent<TControl, TForm>['transformFromFormGroup'];\r\n  private getDefaultValues!: NgxSubFormComponent<TControl, TForm>['getDefaultValues'];\r\n\r\n  public readonly parentValidatorOrOpts: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null | undefined;\r\n  public readonly parentAsyncValidator: AsyncValidatorFn | AsyncValidatorFn[] | null | undefined;\r\n\r\n  constructor(\r\n    subForm: NgxSubFormComponent<TControl, TForm>,\r\n    controls: AbstractControl[],\r\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\r\n  ) {\r\n    // its important to NOT set validators here as this will trigger calls to value before setSubForm was called\r\n    super(controls);\r\n\r\n    this._valueChanges = new CustomEventEmitter();\r\n    (this.valueChanges as any) = this._valueChanges;\r\n\r\n    this.parentValidatorOrOpts = validatorOrOpts;\r\n    this.parentAsyncValidator = asyncValidator;\r\n\r\n    this.setSubForm(subForm);\r\n  }\r\n\r\n  setSubForm(subForm: NgxSubFormComponent<TControl, TForm>) {\r\n    this.subForm = subForm;\r\n    this._valueChanges.setSubForm(subForm);\r\n\r\n    // for some reason root is not properly set for form array\r\n    // on the other hand form array should never be root anyway so we can ignore thsi for now\r\n    // if (this.root === this) {\r\n    //   this.isRoot = true;\r\n    // }\r\n\r\n    // transform to form group should never return null / undefined but {} instead\r\n    this.transformToFormGroup = (obj: TControl | null, defaultValues: Partial<TForm>) => {\r\n      return this.subForm['transformToFormGroup'](obj, defaultValues) || ({} as TForm);\r\n    };\r\n    this.transformFromFormGroup = this.subForm['transformFromFormGroup'];\r\n    this.getDefaultValues = this.subForm['getDefaultValues'];\r\n  }\r\n\r\n  setValue(value: any, options: any) {\r\n    super.setValue(value, options);\r\n    ((this.subForm.formGroup as unknown) as SubFormGroup<any>).updateValue(options);\r\n  }\r\n\r\n  patchValue(value: any, options: any) {\r\n    super.patchValue(value, options);\r\n    ((this.subForm.formGroup as unknown) as SubFormGroup<any>).updateValue(options);\r\n  }\r\n\r\n  updateValue(options: any) {\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    (this.parent as any).updateValue(options);\r\n    //this.updateValueAndValidity(options);\r\n  }\r\n\r\n  removeAt(index: number): void {\r\n    super.removeAt(index);\r\n    ((this.subForm.formGroup as unknown) as SubFormGroup<any>).updateValue(undefined);\r\n  }\r\n}\r\n","// The following code is copied from angular source since those methods tehy are not exported\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AbstractControlOptions,\r\n  AsyncValidator,\r\n  AsyncValidatorFn,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\n\r\n// https://github.com/angular/angular/blob/0075017b43a37d06780cc245c3326212d15fd6bd/packages/forms/src/directives/shared.ts\r\nfunction composeValidators(validators: Array<Validator | ValidatorFn>): ValidatorFn | null {\r\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\r\n}\r\nfunction composeAsyncValidators(validators: Array<AsyncValidator | AsyncValidatorFn>): AsyncValidatorFn | null {\r\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;\r\n}\r\n\r\nfunction normalizeValidator(validator: ValidatorFn | Validator): ValidatorFn {\r\n  // thorws error in latest typescript version\r\n  //if ((<Validator>validator).validate) {\r\n  if ((<any>validator).validate) {\r\n    return (c: AbstractControl) => (<Validator>validator).validate(c);\r\n  } else {\r\n    return <ValidatorFn>validator;\r\n  }\r\n}\r\n\r\nfunction normalizeAsyncValidator(validator: AsyncValidatorFn | AsyncValidator): AsyncValidatorFn {\r\n  // thorws error in latest typescript version\r\n  //if ((<AsyncValidator>validator).validate) {\r\n  if ((<any>validator).validate) {\r\n    return (c: AbstractControl) => (<AsyncValidator>validator).validate(c);\r\n  } else {\r\n    return <AsyncValidatorFn>validator;\r\n  }\r\n}\r\n\r\n// https://github.com/angular/angular/blob/0075017b43a37d06780cc245c3326212d15fd6bd/packages/forms/src/model.ts\r\nfunction isOptionsObj(validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null): boolean {\r\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';\r\n}\r\nexport function coerceToValidator(\r\n  validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n): ValidatorFn | null {\r\n  const validator = (isOptionsObj(validatorOrOpts)\r\n    ? (validatorOrOpts as AbstractControlOptions).validators\r\n    : validatorOrOpts) as ValidatorFn | ValidatorFn[] | null;\r\n\r\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\r\n}\r\n\r\nexport function coerceToAsyncValidator(\r\n  asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\r\n  validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n): AsyncValidatorFn | null {\r\n  const origAsyncValidator = (isOptionsObj(validatorOrOpts)\r\n    ? (validatorOrOpts as AbstractControlOptions).asyncValidators\r\n    : asyncValidator) as AsyncValidatorFn | AsyncValidatorFn | null;\r\n\r\n  return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) : origAsyncValidator || null;\r\n}\r\n","import { AfterContentChecked, Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  AbstractControlOptions,\r\n  AsyncValidatorFn,\r\n  FormArray,\r\n  FormControl,\r\n  ValidatorFn,\r\n} from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { coerceToAsyncValidator, coerceToValidator } from './abstract-control-utils';\r\nimport {\r\n  ArrayPropertyKey,\r\n  ControlMap,\r\n  Controls,\r\n  ControlsNames,\r\n  ControlsType,\r\n  isNullOrUndefined,\r\n  TypedAbstractControl,\r\n} from './ngx-sub-form-utils';\r\nimport { FormGroupOptions, NgxFormWithArrayControls, TypedSubFormGroup } from './ngx-sub-form.types';\r\nimport { patchFormControl, SubFormGroup } from './sub-form-group';\r\n\r\ntype MapControlFunction<FormInterface, MapValue> = (ctrl: AbstractControl, key: keyof FormInterface) => MapValue;\r\ntype FilterControlFunction<FormInterface> = (\r\n  ctrl: TypedAbstractControl<any>,\r\n  key: keyof FormInterface,\r\n  isCtrlWithinFormArray: boolean,\r\n) => boolean;\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxSubFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  implements OnChanges, AfterContentChecked {\r\n  // when developing the lib it's a good idea to set the formGroup type\r\n  // to current + `| undefined` to catch a bunch of possible issues\r\n  // see @note form-group-undefined\r\n\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('subForm') formGroup!: TypedSubFormGroup<ControlInterface, FormInterface>;\r\n\r\n  protected emitNullOnDestroy = true;\r\n  protected emitInitialValueOnInit = true;\r\n  private ngOnChangesWasCalled = false;\r\n\r\n  // can't define them directly\r\n  protected abstract getFormControls(): Controls<FormInterface>;\r\n\r\n  public get formControlNames(): ControlsNames<FormInterface> {\r\n    // see @note form-group-undefined for as syntax\r\n    return this.mapControls(\r\n      (_, key) => key,\r\n      () => true,\r\n      false,\r\n    ) as ControlsNames<FormInterface>;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.ngOnChangesWasCalled = true;\r\n    if (changes['dataInput'] === undefined && changes['formGroup'] === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (!(this.formGroup instanceof SubFormGroup)) {\r\n      throw new Error('The subForm input needs to be of type SubFormGroup.');\r\n    }\r\n\r\n    Object.keys(this.formGroup.controls).forEach(key => {\r\n      this.formGroup.removeControl(key);\r\n    });\r\n\r\n    const subForm = this.formGroup;\r\n\r\n    const controls = this.getFormControls();\r\n    for (const key in controls) {\r\n      if (controls.hasOwnProperty(key)) {\r\n        const control = controls[key];\r\n\r\n        // we need to wire up the form controls with the sub form group\r\n        // this allows us to transform the sub form value to ControlInterface\r\n        // every time any of the form controls on the sub form change\r\n        if (control instanceof FormControl) {\r\n          patchFormControl(subForm, control);\r\n        }\r\n\r\n        this.formGroup.addControl(key, control);\r\n      }\r\n    }\r\n\r\n    // connect sub form group with current sub-form-component\r\n    subForm.setSubForm(this);\r\n\r\n    const options = this.getFormGroupControlOptions() as AbstractControlOptions;\r\n\r\n    const validators: ValidatorFn[] = [];\r\n    const asyncValidators: AsyncValidatorFn[] = [];\r\n\r\n    // get validators that were passed into the sub form group on the parent\r\n    if (subForm.parentValidatorOrOpts) {\r\n      const validator = coerceToValidator(subForm.parentValidatorOrOpts);\r\n      if (validator) {\r\n        validators.push(validator);\r\n      }\r\n    }\r\n\r\n    // get async validators that were passed into the sub form group on the parent\r\n    if (subForm.parentAsyncValidator) {\r\n      const validator = coerceToAsyncValidator(subForm.parentAsyncValidator);\r\n      if (validator) {\r\n        asyncValidators.push(validator);\r\n      }\r\n    }\r\n\r\n    // handle AbstractControlOptions from getFormGroupControlOptions\r\n    if (options) {\r\n      if (options.updateOn) {\r\n        // sadly there is no public metohd that lets us change the update strategy of an already created FormGroup\r\n        (this.formGroup as any)._setUpdateStrategy(options.updateOn);\r\n      }\r\n\r\n      if (options.validators) {\r\n        const validator = coerceToValidator(options.validators);\r\n        if (validator) {\r\n          validators.push(validator);\r\n        }\r\n      }\r\n\r\n      if (options.asyncValidators) {\r\n        const validator = coerceToAsyncValidator(options.asyncValidators);\r\n        if (validator) {\r\n          asyncValidators.push(validator);\r\n        }\r\n      }\r\n    }\r\n\r\n    // set validators / async validators on sub form group\r\n    if (validators.length > 0) {\r\n      this.formGroup.setValidators(validators);\r\n    }\r\n    if (asyncValidators.length > 0) {\r\n      this.formGroup.setAsyncValidators(asyncValidators);\r\n    }\r\n\r\n    // if the form has default values, they should be applied straight away\r\n    const defaultValues: Partial<FormInterface> | null = this.getDefaultValues();\r\n\r\n    // get default values for reset, if null fallback to undefined as there si a difference when calling reset\r\n    const transformedValue = this.transformFromFormGroup(defaultValues as FormInterface) || undefined;\r\n    // since this is the initial setting of form values do NOT emit an event\r\n\r\n    let mergedValues: ControlInterface;\r\n    if (Array.isArray(transformedValue)) {\r\n      mergedValues = subForm.controlValue;\r\n    } else {\r\n      const controlValue = (changes['dataInput'] ? (this as any)['dataInput'] : subForm.controlValue) || {};\r\n      mergedValues = { ...transformedValue, ...controlValue } as ControlInterface;\r\n    }\r\n\r\n    const formValue = this.transformToFormGroup(mergedValues, {});\r\n    this.handleFormArrayControls(formValue);\r\n\r\n    // self = false is critical here\r\n    // this allows the parent form to re-evaluate its status after each of its sub form has completed intialization\r\n    // we actually only need to call this on the deepest sub form in a tree (leaves)\r\n    // but there is no way to identify if there are sub forms on the current form + that are also rendered\r\n    // as only when sub forms are rendered the on changes method on the sub form is executed\r\n\r\n    // TODO decide if we want to emit an event when input control value != control value after intialization\r\n    // this happens for example when null is passed in but default values change the value of the inner form\r\n    this.formGroup.reset(mergedValues, { onlySelf: false, emitEvent: false });\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    // TODO this runs too often, find out of this can be triggered differently\r\n    // checking if the form group has a change detector (root forms might not)\r\n    if (this.ngOnChangesWasCalled && this.formGroup.cd) {\r\n      // if this is the root form\r\n      // OR if ist a sub form but the root form does not have a change detector\r\n      // we need to actually run change detection vs just marking for check\r\n      if (!this.formGroup.parent) {\r\n        this.formGroup.cd.detectChanges();\r\n      } else {\r\n        this.formGroup.cd.markForCheck();\r\n      }\r\n    }\r\n  }\r\n\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n    filterControl: FilterControlFunction<FormInterface>,\r\n    recursiveIfArray: boolean,\r\n  ): Partial<ControlMap<FormInterface, MapValue | MapValue[]>> | null;\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n  ): ControlMap<FormInterface, MapValue | MapValue[]> | null;\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n    filterControl: FilterControlFunction<FormInterface> = () => true,\r\n    recursiveIfArray: boolean = true,\r\n  ): Partial<ControlMap<FormInterface, MapValue | MapValue[]>> | null {\r\n    if (!this.formGroup) {\r\n      return null;\r\n    }\r\n\r\n    const formControls: ControlsType<FormInterface> = this.formGroup.controls;\r\n\r\n    const controls: Partial<ControlMap<FormInterface, MapValue | MapValue[]>> = {};\r\n\r\n    for (const key in formControls) {\r\n      if (this.formGroup.controls.hasOwnProperty(key)) {\r\n        const control = formControls[key];\r\n\r\n        if (recursiveIfArray && control instanceof FormArray) {\r\n          const values: MapValue[] = [];\r\n\r\n          for (let i = 0; i < control.length; i++) {\r\n            if (filterControl(control.at(i), key, true)) {\r\n              values.push(mapControl(control.at(i), key));\r\n            }\r\n          }\r\n\r\n          if (values.length > 0 && values.some(x => !isNullOrUndefined(x))) {\r\n            controls[key] = values;\r\n          }\r\n        } else if (control && filterControl(control, key, false)) {\r\n          controls[key] = mapControl(control, key);\r\n        }\r\n      }\r\n    }\r\n\r\n    return controls;\r\n  }\r\n\r\n  /**\r\n   * Extend this method to provide custom local FormGroup level validation\r\n   */\r\n  protected getFormGroupControlOptions(): FormGroupOptions<FormInterface> {\r\n    return {};\r\n  }\r\n\r\n  // when getDefaultValues is defined, you do not need to specify the default values\r\n  // in your form (the ones defined within the `getFormControls` method)\r\n  protected getDefaultValues(): Partial<FormInterface> {\r\n    return {};\r\n  }\r\n\r\n  public handleFormArrayControls(obj: any) {\r\n    // TODO check if this can still happen, it appreaded during development. might alerady be fixed\r\n    if (!this.formGroup) {\r\n      return;\r\n    }\r\n\r\n    Object.entries(obj).forEach(([key, value]) => {\r\n      if (this.formGroup.get(key) instanceof FormArray && Array.isArray(value)) {\r\n        const formArray: FormArray = this.formGroup.get(key) as FormArray;\r\n\r\n        // instead of creating a new array every time and push a new FormControl\r\n        // we just remove or add what is necessary so that:\r\n        // - it is as efficient as possible and do not create unnecessary FormControl every time\r\n        // - validators are not destroyed/created again and eventually fire again for no reason\r\n        while (formArray.length > value.length) {\r\n          formArray.removeAt(formArray.length - 1);\r\n        }\r\n\r\n        for (let i = formArray.length; i < value.length; i++) {\r\n          if (this.formIsFormWithArrayControls()) {\r\n            formArray.insert(i, this.createFormArrayControl(key as ArrayPropertyKey<FormInterface>, value[i]));\r\n          } else {\r\n            const control = new FormControl(value[i]);\r\n            patchFormControl(this.formGroup, control);\r\n            formArray.insert(i, control);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private formIsFormWithArrayControls(): this is NgxFormWithArrayControls<FormInterface> {\r\n    return typeof ((this as unknown) as NgxFormWithArrayControls<FormInterface>).createFormArrayControl === 'function';\r\n  }\r\n\r\n  // when customizing the emission rate of your sub form component, remember not to **mutate** the stream\r\n  // it is safe to throttle, debounce, delay, etc but using skip, first, last or mutating data inside\r\n  // the stream will cause issues!\r\n  public handleEmissionRate(): (obs$: Observable<ControlInterface | null>) => Observable<ControlInterface | null> {\r\n    return obs$ => obs$;\r\n  }\r\n\r\n  // that method can be overridden if the\r\n  // shape of the form needs to be modified\r\n  protected transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null {\r\n    return (obj as any) as FormInterface;\r\n  }\r\n\r\n  // that method can be overridden if the\r\n  // shape of the form needs to be modified\r\n  protected transformFromFormGroup(formValue: FormInterface): ControlInterface | null {\r\n    return (formValue as any) as ControlInterface;\r\n  }\r\n}\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxSubFormRemapComponent<ControlInterface, FormInterface> extends NgxSubFormComponent<\r\n  ControlInterface,\r\n  FormInterface\r\n> {\r\n  protected abstract transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null;\r\n  protected abstract transformFromFormGroup(formValue: FormInterface): ControlInterface | null;\r\n}\r\n","import { ChangeDetectorRef, Directive, EventEmitter, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport isEqual from 'fast-deep-equal';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\nimport { isNullOrUndefined, takeUntilDestroyed } from './ngx-sub-form-utils';\r\nimport { NgxSubFormRemapComponent } from './ngx-sub-form.component';\r\nimport { TypedSubFormGroup } from './ngx-sub-form.types';\r\nimport { SubFormGroup } from './sub-form-group';\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxRootFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  extends NgxSubFormRemapComponent<ControlInterface, FormInterface>\r\n  implements OnInit, OnDestroy {\r\n  public abstract dataInput: Required<ControlInterface> | null | undefined;\r\n\r\n  public abstract dataOutput: EventEmitter<ControlInterface>;\r\n  // using a private variable `_dataOutput$` to be able to control the\r\n  // emission rate with a debounce or throttle for ex\r\n  /** @internal */\r\n  protected _dataOutput$: Subject<ControlInterface> = new Subject();\r\n\r\n  protected emitInitialValueOnInit = false;\r\n  protected emitNullOnDestroy = false;\r\n\r\n  protected dataValue: ControlInterface | null = null;\r\n\r\n  // change detector only needs to be passed from root form\r\n  // for sub forms the sub-form-directive injects the change detector ref for us\r\n  constructor(cd: ChangeDetectorRef) {\r\n    super();\r\n    this.formGroup = new SubFormGroup<ControlInterface, FormInterface>({}) as TypedSubFormGroup<\r\n      ControlInterface,\r\n      FormInterface\r\n    >;\r\n\r\n    if (cd) {\r\n      this.formGroup.setChangeDetector(cd);\r\n    }\r\n  }\r\n\r\n  // needed for take until destroyed\r\n  ngOnDestroy(): void {}\r\n\r\n  public ngOnInit(): void {\r\n    this._dataOutput$\r\n      .pipe(\r\n        takeUntilDestroyed(this),\r\n        filter(() => this.formGroup.valid),\r\n        tap(value => this.dataOutput.emit(value)),\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /** @internal */\r\n  protected onRegisterOnChangeHook(data: ControlInterface | null): boolean {\r\n    if (this.formGroup.invalid || isEqual(data, this.dataInput)) {\r\n      return false;\r\n    }\r\n\r\n    this.dataValue = data;\r\n    return true;\r\n  }\r\n\r\n  protected transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null {\r\n    return (obj as unknown) as FormInterface;\r\n  }\r\n\r\n  protected transformFromFormGroup(formValue: FormInterface): ControlInterface | null {\r\n    return (formValue as unknown) as ControlInterface;\r\n  }\r\n\r\n  public manualSave(): void {\r\n    // if (this.formGroup.valid) {\r\n    //   this.dataValue = this.formGroup.controlValue;\r\n    //   this._dataOutput$.next(this.dataValue);\r\n    // }\r\n    this.dataValue = this.formGroup.controlValue as ControlInterface;\r\n    if (!isNullOrUndefined(this.dataValue) && this.formGroup.valid) {\r\n      this._dataOutput$.next(this.dataValue);\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, startWith, tap } from 'rxjs/operators';\r\n\r\nimport { NgxRootFormComponent } from './ngx-root-form.component';\r\nimport { takeUntilDestroyed } from './ngx-sub-form-utils';\r\n\r\ntype FormGroupStatus = 'DISABLED' | 'PENDING' | 'INVALID' | 'VALID';\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxAutomaticRootFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  extends NgxRootFormComponent<ControlInterface, FormInterface>\r\n  implements OnInit, OnDestroy {\r\n  constructor(cd: ChangeDetectorRef) {\r\n    super(cd);\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    const status$ = this.formGroup.statusChanges.pipe(startWith(this.formGroup.status)) as Observable<FormGroupStatus>;\r\n\r\n    const value$ = this.formGroup.valueChanges.pipe(startWith(this.formGroup.value));\r\n\r\n    combineLatest([status$, value$])\r\n      .pipe(\r\n        takeUntilDestroyed(this),\r\n        filter(([status, value]) => status === 'VALID'),\r\n        tap(() => this.manualSave()),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { SubFormGroup } from './sub-form-group';\r\n\r\n@Directive({\r\n  selector: '[subForm]',\r\n})\r\nexport class SubFormDirective<TControl, TForm> implements OnChanges {\r\n  @Input() subForm!: SubFormGroup<TControl, TForm>;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.subForm && this.subForm) {\r\n      this.subForm.setChangeDetector(this.cd);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SubFormDirective } from './sub-form.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SubFormDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,    \r\n  ],\r\n  exports: [\r\n    SubFormDirective\r\n  ]\r\n})\r\nexport class NgxSubFormModule { }\r\n"]}