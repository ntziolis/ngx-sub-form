// The following code is copied from angular source since those methods tehy are not exported
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Validators, } from '@angular/forms';
// https://github.com/angular/angular/blob/0075017b43a37d06780cc245c3326212d15fd6bd/packages/forms/src/directives/shared.ts
function composeValidators(validators) {
    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
}
function composeAsyncValidators(validators) {
    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
}
function normalizeValidator(validator) {
    // thorws error in latest typescript version
    //if ((<Validator>validator).validate) {
    if (validator.validate) {
        return (c) => validator.validate(c);
    }
    else {
        return validator;
    }
}
function normalizeAsyncValidator(validator) {
    // thorws error in latest typescript version
    //if ((<AsyncValidator>validator).validate) {
    if (validator.validate) {
        return (c) => validator.validate(c);
    }
    else {
        return validator;
    }
}
// https://github.com/angular/angular/blob/0075017b43a37d06780cc245c3326212d15fd6bd/packages/forms/src/model.ts
function isOptionsObj(validatorOrOpts) {
    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';
}
export function coerceToValidator(validatorOrOpts) {
    const validator = (isOptionsObj(validatorOrOpts)
        ? validatorOrOpts.validators
        : validatorOrOpts);
    return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
export function coerceToAsyncValidator(asyncValidator, validatorOrOpts) {
    const origAsyncValidator = (isOptionsObj(validatorOrOpts)
        ? validatorOrOpts.asyncValidators
        : asyncValidator);
    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) : origAsyncValidator || null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY29udHJvbC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zdWItZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9hYnN0cmFjdC1jb250cm9sLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZGQUE2RjtBQUM3Rjs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBTUwsVUFBVSxHQUVYLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsMkhBQTJIO0FBQzNILFNBQVMsaUJBQWlCLENBQUMsVUFBMEM7SUFDbkUsT0FBTyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDNUYsQ0FBQztBQUNELFNBQVMsc0JBQXNCLENBQUMsVUFBb0Q7SUFDbEYsT0FBTyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDdEcsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQUMsU0FBa0M7SUFDNUQsNENBQTRDO0lBQzVDLHdDQUF3QztJQUN4QyxJQUFVLFNBQVUsQ0FBQyxRQUFRLEVBQUU7UUFDN0IsT0FBTyxDQUFDLENBQWtCLEVBQUUsRUFBRSxDQUFhLFNBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkU7U0FBTTtRQUNMLE9BQW9CLFNBQVMsQ0FBQztLQUMvQjtBQUNILENBQUM7QUFFRCxTQUFTLHVCQUF1QixDQUFDLFNBQTRDO0lBQzNFLDRDQUE0QztJQUM1Qyw2Q0FBNkM7SUFDN0MsSUFBVSxTQUFVLENBQUMsUUFBUSxFQUFFO1FBQzdCLE9BQU8sQ0FBQyxDQUFrQixFQUFFLEVBQUUsQ0FBa0IsU0FBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4RTtTQUFNO1FBQ0wsT0FBeUIsU0FBUyxDQUFDO0tBQ3BDO0FBQ0gsQ0FBQztBQUVELCtHQUErRztBQUMvRyxTQUFTLFlBQVksQ0FBQyxlQUE2RTtJQUNqRyxPQUFPLGVBQWUsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLE9BQU8sZUFBZSxLQUFLLFFBQVEsQ0FBQztBQUMzRyxDQUFDO0FBQ0QsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixlQUE2RTtJQUU3RSxNQUFNLFNBQVMsR0FBRyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7UUFDOUMsQ0FBQyxDQUFFLGVBQTBDLENBQUMsVUFBVTtRQUN4RCxDQUFDLENBQUMsZUFBZSxDQUF1QyxDQUFDO0lBRTNELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUM7QUFDckYsQ0FBQztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsY0FBNkQsRUFDN0QsZUFBNkU7SUFFN0UsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7UUFDdkQsQ0FBQyxDQUFFLGVBQTBDLENBQUMsZUFBZTtRQUM3RCxDQUFDLENBQUMsY0FBYyxDQUErQyxDQUFDO0lBRWxFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUM7QUFDckgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBmb2xsb3dpbmcgY29kZSBpcyBjb3BpZWQgZnJvbSBhbmd1bGFyIHNvdXJjZSBzaW5jZSB0aG9zZSBtZXRob2RzIHRlaHkgYXJlIG5vdCBleHBvcnRlZFxyXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcbmltcG9ydCB7XHJcbiAgQWJzdHJhY3RDb250cm9sT3B0aW9ucyxcclxuICBBc3luY1ZhbGlkYXRvcixcclxuICBBc3luY1ZhbGlkYXRvckZuLFxyXG4gIFZhbGlkYXRvcixcclxuICBWYWxpZGF0b3JGbixcclxuICBWYWxpZGF0b3JzLFxyXG4gIEFic3RyYWN0Q29udHJvbCxcclxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvMDA3NTAxN2I0M2EzN2QwNjc4MGNjMjQ1YzMzMjYyMTJkMTVmZDZiZC9wYWNrYWdlcy9mb3Jtcy9zcmMvZGlyZWN0aXZlcy9zaGFyZWQudHNcclxuZnVuY3Rpb24gY29tcG9zZVZhbGlkYXRvcnModmFsaWRhdG9yczogQXJyYXk8VmFsaWRhdG9yIHwgVmFsaWRhdG9yRm4+KTogVmFsaWRhdG9yRm4gfCBudWxsIHtcclxuICByZXR1cm4gdmFsaWRhdG9ycyAhPSBudWxsID8gVmFsaWRhdG9ycy5jb21wb3NlKHZhbGlkYXRvcnMubWFwKG5vcm1hbGl6ZVZhbGlkYXRvcikpIDogbnVsbDtcclxufVxyXG5mdW5jdGlvbiBjb21wb3NlQXN5bmNWYWxpZGF0b3JzKHZhbGlkYXRvcnM6IEFycmF5PEFzeW5jVmFsaWRhdG9yIHwgQXN5bmNWYWxpZGF0b3JGbj4pOiBBc3luY1ZhbGlkYXRvckZuIHwgbnVsbCB7XHJcbiAgcmV0dXJuIHZhbGlkYXRvcnMgIT0gbnVsbCA/IFZhbGlkYXRvcnMuY29tcG9zZUFzeW5jKHZhbGlkYXRvcnMubWFwKG5vcm1hbGl6ZUFzeW5jVmFsaWRhdG9yKSkgOiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub3JtYWxpemVWYWxpZGF0b3IodmFsaWRhdG9yOiBWYWxpZGF0b3JGbiB8IFZhbGlkYXRvcik6IFZhbGlkYXRvckZuIHtcclxuICAvLyB0aG9yd3MgZXJyb3IgaW4gbGF0ZXN0IHR5cGVzY3JpcHQgdmVyc2lvblxyXG4gIC8vaWYgKCg8VmFsaWRhdG9yPnZhbGlkYXRvcikudmFsaWRhdGUpIHtcclxuICBpZiAoKDxhbnk+dmFsaWRhdG9yKS52YWxpZGF0ZSkge1xyXG4gICAgcmV0dXJuIChjOiBBYnN0cmFjdENvbnRyb2wpID0+ICg8VmFsaWRhdG9yPnZhbGlkYXRvcikudmFsaWRhdGUoYyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiA8VmFsaWRhdG9yRm4+dmFsaWRhdG9yO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbm9ybWFsaXplQXN5bmNWYWxpZGF0b3IodmFsaWRhdG9yOiBBc3luY1ZhbGlkYXRvckZuIHwgQXN5bmNWYWxpZGF0b3IpOiBBc3luY1ZhbGlkYXRvckZuIHtcclxuICAvLyB0aG9yd3MgZXJyb3IgaW4gbGF0ZXN0IHR5cGVzY3JpcHQgdmVyc2lvblxyXG4gIC8vaWYgKCg8QXN5bmNWYWxpZGF0b3I+dmFsaWRhdG9yKS52YWxpZGF0ZSkge1xyXG4gIGlmICgoPGFueT52YWxpZGF0b3IpLnZhbGlkYXRlKSB7XHJcbiAgICByZXR1cm4gKGM6IEFic3RyYWN0Q29udHJvbCkgPT4gKDxBc3luY1ZhbGlkYXRvcj52YWxpZGF0b3IpLnZhbGlkYXRlKGMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gPEFzeW5jVmFsaWRhdG9yRm4+dmFsaWRhdG9yO1xyXG4gIH1cclxufVxyXG5cclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzAwNzUwMTdiNDNhMzdkMDY3ODBjYzI0NWMzMzI2MjEyZDE1ZmQ2YmQvcGFja2FnZXMvZm9ybXMvc3JjL21vZGVsLnRzXHJcbmZ1bmN0aW9uIGlzT3B0aW9uc09iaih2YWxpZGF0b3JPck9wdHM/OiBWYWxpZGF0b3JGbiB8IFZhbGlkYXRvckZuW10gfCBBYnN0cmFjdENvbnRyb2xPcHRpb25zIHwgbnVsbCk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiB2YWxpZGF0b3JPck9wdHMgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWxpZGF0b3JPck9wdHMpICYmIHR5cGVvZiB2YWxpZGF0b3JPck9wdHMgPT09ICdvYmplY3QnO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VUb1ZhbGlkYXRvcihcclxuICB2YWxpZGF0b3JPck9wdHM/OiBWYWxpZGF0b3JGbiB8IFZhbGlkYXRvckZuW10gfCBBYnN0cmFjdENvbnRyb2xPcHRpb25zIHwgbnVsbCxcclxuKTogVmFsaWRhdG9yRm4gfCBudWxsIHtcclxuICBjb25zdCB2YWxpZGF0b3IgPSAoaXNPcHRpb25zT2JqKHZhbGlkYXRvck9yT3B0cylcclxuICAgID8gKHZhbGlkYXRvck9yT3B0cyBhcyBBYnN0cmFjdENvbnRyb2xPcHRpb25zKS52YWxpZGF0b3JzXHJcbiAgICA6IHZhbGlkYXRvck9yT3B0cykgYXMgVmFsaWRhdG9yRm4gfCBWYWxpZGF0b3JGbltdIHwgbnVsbDtcclxuXHJcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsaWRhdG9yKSA/IGNvbXBvc2VWYWxpZGF0b3JzKHZhbGlkYXRvcikgOiB2YWxpZGF0b3IgfHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvZXJjZVRvQXN5bmNWYWxpZGF0b3IoXHJcbiAgYXN5bmNWYWxpZGF0b3I/OiBBc3luY1ZhbGlkYXRvckZuIHwgQXN5bmNWYWxpZGF0b3JGbltdIHwgbnVsbCxcclxuICB2YWxpZGF0b3JPck9wdHM/OiBWYWxpZGF0b3JGbiB8IFZhbGlkYXRvckZuW10gfCBBYnN0cmFjdENvbnRyb2xPcHRpb25zIHwgbnVsbCxcclxuKTogQXN5bmNWYWxpZGF0b3JGbiB8IG51bGwge1xyXG4gIGNvbnN0IG9yaWdBc3luY1ZhbGlkYXRvciA9IChpc09wdGlvbnNPYmoodmFsaWRhdG9yT3JPcHRzKVxyXG4gICAgPyAodmFsaWRhdG9yT3JPcHRzIGFzIEFic3RyYWN0Q29udHJvbE9wdGlvbnMpLmFzeW5jVmFsaWRhdG9yc1xyXG4gICAgOiBhc3luY1ZhbGlkYXRvcikgYXMgQXN5bmNWYWxpZGF0b3JGbiB8IEFzeW5jVmFsaWRhdG9yRm4gfCBudWxsO1xyXG5cclxuICByZXR1cm4gQXJyYXkuaXNBcnJheShvcmlnQXN5bmNWYWxpZGF0b3IpID8gY29tcG9zZUFzeW5jVmFsaWRhdG9ycyhvcmlnQXN5bmNWYWxpZGF0b3IpIDogb3JpZ0FzeW5jVmFsaWRhdG9yIHx8IG51bGw7XHJcbn1cclxuIl19