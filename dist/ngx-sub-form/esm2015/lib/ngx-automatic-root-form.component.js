import { __decorate, __metadata } from "tslib";
import { ChangeDetectorRef, Directive, OnDestroy, OnInit, Optional } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter, startWith, tap } from 'rxjs/operators';
import { NgxRootFormComponent } from './ngx-root-form.component';
import { takeUntilDestroyed } from './ngx-sub-form-utils';
let NgxAutomaticRootFormComponent = 
// tslint:disable-next-line: directive-class-suffix
class NgxAutomaticRootFormComponent extends NgxRootFormComponent {
    constructor(cd) {
        super(cd);
    }
    ngOnInit() {
        super.ngOnInit();
        const status$ = this.formGroup.statusChanges.pipe(startWith(this.formGroup.status));
        const value$ = this.formGroup.valueChanges.pipe(startWith(this.formGroup.value));
        combineLatest([status$, value$])
            .pipe(takeUntilDestroyed(this), filter(([status, value]) => status === 'VALID'), tap(() => this.manualSave()))
            .subscribe();
    }
};
NgxAutomaticRootFormComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NgxAutomaticRootFormComponent = __decorate([
    Directive()
    // tslint:disable-next-line: directive-class-suffix
    ,
    __metadata("design:paramtypes", [ChangeDetectorRef])
], NgxAutomaticRootFormComponent);
export { NgxAutomaticRootFormComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dG9tYXRpYy1yb290LWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXN1Yi1mb3JtLyIsInNvdXJjZXMiOlsibGliL25neC1hdXRvbWF0aWMtcm9vdC1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsYUFBYSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBTTFELElBQXNCLDZCQUE2QjtBQURuRCxtREFBbUQ7QUFDbkQsTUFBc0IsNkJBQ3BCLFNBQVEsb0JBQXFEO0lBRTdELFlBQVksRUFBcUI7UUFDL0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUVELFFBQVE7UUFDTixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFnQyxDQUFDO1FBRW5ILE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWpGLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQzthQUM3QixJQUFJLENBQ0gsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLEVBQy9DLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FDN0I7YUFDQSxTQUFTLEVBQUUsQ0FBQztJQUNqQixDQUFDO0NBQ0YsQ0FBQTs7WUFuQmlCLGlCQUFpQjs7QUFIYiw2QkFBNkI7SUFGbEQsU0FBUyxFQUFFO0lBQ1osbURBQW1EOztxQ0FJakMsaUJBQWlCO0dBSGIsNkJBQTZCLENBc0JsRDtTQXRCcUIsNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgT25EZXN0cm95LCBPbkluaXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBzdGFydFdpdGgsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IE5neFJvb3RGb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtcm9vdC1mb3JtLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJy4vbmd4LXN1Yi1mb3JtLXV0aWxzJztcclxuXHJcbnR5cGUgRm9ybUdyb3VwU3RhdHVzID0gJ0RJU0FCTEVEJyB8ICdQRU5ESU5HJyB8ICdJTlZBTElEJyB8ICdWQUxJRCc7XHJcblxyXG5ARGlyZWN0aXZlKClcclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ3hBdXRvbWF0aWNSb290Rm9ybUNvbXBvbmVudDxDb250cm9sSW50ZXJmYWNlLCBGb3JtSW50ZXJmYWNlID0gQ29udHJvbEludGVyZmFjZT5cclxuICBleHRlbmRzIE5neFJvb3RGb3JtQ29tcG9uZW50PENvbnRyb2xJbnRlcmZhY2UsIEZvcm1JbnRlcmZhY2U+XHJcbiAgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgY29uc3RydWN0b3IoY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XHJcbiAgICBzdXBlcihjZCk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcblxyXG4gICAgY29uc3Qgc3RhdHVzJCA9IHRoaXMuZm9ybUdyb3VwLnN0YXR1c0NoYW5nZXMucGlwZShzdGFydFdpdGgodGhpcy5mb3JtR3JvdXAuc3RhdHVzKSkgYXMgT2JzZXJ2YWJsZTxGb3JtR3JvdXBTdGF0dXM+O1xyXG5cclxuICAgIGNvbnN0IHZhbHVlJCA9IHRoaXMuZm9ybUdyb3VwLnZhbHVlQ2hhbmdlcy5waXBlKHN0YXJ0V2l0aCh0aGlzLmZvcm1Hcm91cC52YWx1ZSkpO1xyXG5cclxuICAgIGNvbWJpbmVMYXRlc3QoW3N0YXR1cyQsIHZhbHVlJF0pXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRha2VVbnRpbERlc3Ryb3llZCh0aGlzKSxcclxuICAgICAgICBmaWx0ZXIoKFtzdGF0dXMsIHZhbHVlXSkgPT4gc3RhdHVzID09PSAnVkFMSUQnKSxcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5tYW51YWxTYXZlKCkpLFxyXG4gICAgICApXHJcbiAgICAgIC5zdWJzY3JpYmUoKTtcclxuICB9XHJcbn1cclxuIl19