import { forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { Subject, timer } from 'rxjs';
import { debounce, takeUntil } from 'rxjs/operators';
import { SUB_FORM_COMPONENT_TOKEN } from './ngx-sub-form-tokens';
export function subformComponentProviders(component) {
    return [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => component),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => component),
            multi: true,
        },
        {
            provide: SUB_FORM_COMPONENT_TOKEN,
            useExisting: forwardRef(() => component),
        },
    ];
}
const wrapAsQuote = (str) => `"${str}"`;
const ɵ0 = wrapAsQuote;
export class MissingFormControlsError extends Error {
    constructor(missingFormControls) {
        super(`Attempt to update the form value with an object that doesn't contains some of the required form control keys.\nMissing: ${missingFormControls
            .map(wrapAsQuote)
            .join(`, `)}`);
    }
}
const ɵ1 = (time) => obs => obs.pipe(debounce(() => timer(time)));
export const NGX_SUB_FORM_HANDLE_VALUE_CHANGES_RATE_STRATEGIES = {
    debounce: ɵ1,
};
/**
 * Easily unsubscribe from an observable stream by appending `takeUntilDestroyed(this)` to the observable pipe.
 * If the component already has a `ngOnDestroy` method defined, it will call this first.
 * Note that the component *must* implement OnDestroy for this to work (the typings will enforce this anyway)
 */
export function takeUntilDestroyed(component) {
    return (source) => {
        const onDestroy = new Subject();
        const previousOnDestroy = component.ngOnDestroy;
        component.ngOnDestroy = () => {
            if (previousOnDestroy) {
                previousOnDestroy.apply(component);
            }
            onDestroy.next();
            onDestroy.complete();
        };
        return source.pipe(takeUntil(onDestroy));
    };
}
/** @internal */
export function isNullOrUndefined(obj) {
    return obj === null || obj === undefined;
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,