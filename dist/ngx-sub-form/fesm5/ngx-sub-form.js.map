{"version":3,"file":"ngx-sub-form.js","sources":["ng://ngx-sub-form/lib/ngx-sub-form-tokens.ts","ng://ngx-sub-form/lib/ngx-sub-form-utils.ts","ng://ngx-sub-form/lib/sub-form-group.ts","ng://ngx-sub-form/lib/abstract-control-utils.ts","ng://ngx-sub-form/lib/ngx-sub-form.component.ts","ng://ngx-sub-form/lib/ngx-root-form.component.ts","ng://ngx-sub-form/lib/ngx-automatic-root-form.component.ts","ng://ngx-sub-form/lib/sub-form.directive.ts","ng://ngx-sub-form/lib/ngx-sub-form.module.ts","ng://ngx-sub-form/public_api.ts","ng://ngx-sub-form/ngx-sub-form.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\n// ----------------------------------------------------------------------------------------\r\n// no need to expose that token out of the lib, do not export that file from public_api.ts!\r\n// ----------------------------------------------------------------------------------------\r\n\r\n// see https://github.com/angular/angular/issues/8277#issuecomment-263029485\r\n// this basically allows us to access the host component\r\n// from a directive without knowing the type of the component at run time\r\nexport const SUB_FORM_COMPONENT_TOKEN = new InjectionToken<NgxSubFormComponent<any>>('NgxSubFormComponentToken');\r\n","import { forwardRef, OnDestroy, Provider } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n} from '@angular/forms';\r\nimport { Observable, Subject, timer } from 'rxjs';\r\nimport { debounce, takeUntil } from 'rxjs/operators';\r\n\r\nimport { SUB_FORM_COMPONENT_TOKEN } from './ngx-sub-form-tokens';\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\nexport type Controls<T> = { [K in keyof T]-?: AbstractControl };\r\n\r\nexport type ControlsNames<T> = { [K in keyof T]-?: K };\r\n\r\nexport type ControlMap<T, V> = { [K in keyof T]-?: V };\r\n\r\nexport type ControlsType<T> = {\r\n  [K in keyof T]-?: T[K] extends any[] ? TypedFormArray<T[K]> : TypedFormControl<T[K]> | TypedFormGroup<T[K]>;\r\n};\r\n\r\nexport type FormErrorsType<T> = {\r\n  [K in keyof T]-?: T[K] extends any[] ? (null | ValidationErrors)[] : ValidationErrors;\r\n};\r\n\r\nexport type FormUpdate<FormInterface> = { [FormControlInterface in keyof FormInterface]?: true };\r\n\r\nexport type FormErrors<FormInterface> = null | Partial<\r\n  FormErrorsType<FormInterface> & {\r\n    formGroup?: ValidationErrors;\r\n  }\r\n>;\r\n\r\n// using set/patch value options signature from form controls to allow typing without additional casting\r\nexport interface TypedAbstractControl<TValue> extends AbstractControl {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  setValue(value: TValue, options?: Parameters<AbstractControl['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<AbstractControl['patchValue']>[1]): void;\r\n}\r\n\r\nexport interface TypedFormGroup<TValue> extends FormGroup {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  controls: ControlsType<TValue>;\r\n  setValue(value: TValue, options?: Parameters<FormGroup['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<FormGroup['patchValue']>[1]): void;\r\n  getRawValue(): TValue;\r\n}\r\n\r\nexport interface TypedFormArray<TValue extends any[]> extends FormArray {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  controls: TypedAbstractControl<TValue>[];\r\n  setValue(value: TValue, options?: Parameters<FormArray['setValue']>[1]): void;\r\n  patchValue(value: TValue, options?: Parameters<FormArray['patchValue']>[1]): void;\r\n  getRawValue(): TValue;\r\n}\r\n\r\nexport interface TypedFormControl<TValue> extends FormGroup {\r\n  value: TValue;\r\n  valueChanges: Observable<TValue>;\r\n  setValue(value: TValue, options?: Parameters<FormControl['setValue']>[1]): void;\r\n  patchValue(value: Partial<TValue>, options?: Parameters<FormControl['patchValue']>[1]): void;\r\n}\r\n\r\nexport type KeysWithType<T, V> = { [K in keyof T]: T[K] extends V ? K : never }[keyof T];\r\n\r\nexport type ArrayPropertyKey<T> = KeysWithType<T, Array<any>>;\r\n\r\nexport type ArrayPropertyValue<T, K extends ArrayPropertyKey<T> = ArrayPropertyKey<T>> = T[K] extends Array<infer U>\r\n  ? U\r\n  : never;\r\n\r\nexport function subformComponentProviders(component: any): Provider[] {\r\n  return [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => component),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => component),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: SUB_FORM_COMPONENT_TOKEN,\r\n      useExisting: forwardRef(() => component),\r\n    },\r\n  ];\r\n}\r\n\r\nconst wrapAsQuote = (str: string): string => `\"${str}\"`;\r\n\r\nexport class MissingFormControlsError<T extends string> extends Error {\r\n  constructor(missingFormControls: T[]) {\r\n    super(\r\n      `Attempt to update the form value with an object that doesn't contains some of the required form control keys.\\nMissing: ${missingFormControls\r\n        .map(wrapAsQuote)\r\n        .join(`, `)}`,\r\n    );\r\n  }\r\n}\r\n\r\nexport const NGX_SUB_FORM_HANDLE_VALUE_CHANGES_RATE_STRATEGIES = {\r\n  debounce: <T, U>(time: number): ReturnType<NgxSubFormComponent<T, U>['handleEmissionRate']> => obs =>\r\n    obs.pipe(debounce(() => timer(time))),\r\n};\r\n\r\n/**\r\n * Easily unsubscribe from an observable stream by appending `takeUntilDestroyed(this)` to the observable pipe.\r\n * If the component already has a `ngOnDestroy` method defined, it will call this first.\r\n * Note that the component *must* implement OnDestroy for this to work (the typings will enforce this anyway)\r\n */\r\nexport function takeUntilDestroyed<T>(component: OnDestroy): (source: Observable<T>) => Observable<T> {\r\n  return (source: Observable<T>): Observable<T> => {\r\n    const onDestroy = new Subject();\r\n    const previousOnDestroy = component.ngOnDestroy;\r\n\r\n    component.ngOnDestroy = () => {\r\n      if (previousOnDestroy) {\r\n        previousOnDestroy.apply(component);\r\n      }\r\n\r\n      onDestroy.next();\r\n      onDestroy.complete();\r\n    };\r\n\r\n    return source.pipe(takeUntil(onDestroy));\r\n  };\r\n}\r\n\r\n/** @internal */\r\nexport function isNullOrUndefined(obj: any): obj is null | undefined {\r\n  return obj === null || obj === undefined;\r\n}\r\n","import { EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport {\r\n  AbstractControlOptions,\r\n  AsyncValidatorFn,\r\n  FormGroup,\r\n  ValidatorFn,\r\n  FormControl,\r\n  FormArray,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\n\r\nimport { NgxSubFormComponent } from './ngx-sub-form.component';\r\n\r\nclass CustomEventEmitter<TControl, TForm = TControl> extends EventEmitter<TControl> {\r\n  private subForm!: NgxSubFormComponent<TControl, TForm>;\r\n  private transformToFormGroup!: NgxSubFormComponent<TControl, TForm>['transformToFormGroup'];\r\n  private transformFromFormGroup!: NgxSubFormComponent<TControl, TForm>['transformFromFormGroup'];\r\n  private getDefaultValues!: NgxSubFormComponent<TControl, TForm>['getDefaultValues'];\r\n\r\n  setSubForm(subForm: NgxSubFormComponent<TControl, TForm>) {\r\n    this.subForm = subForm;\r\n\r\n    this.transformToFormGroup = (obj: TControl | null, defaultValues: Partial<TForm>) => {\r\n      return this.subForm['transformToFormGroup'](obj, defaultValues) || ({} as TForm);\r\n    };\r\n    this.transformFromFormGroup = this.subForm['transformFromFormGroup'];\r\n    this.getDefaultValues = this.subForm['getDefaultValues'];\r\n  }\r\n\r\n  emit(value?: TControl): void {\r\n    // all those would happen while the sub-form tree is still being initalized\r\n    // we can safely ignore all emits until subForm is set\r\n    // since in ngOnInit of sub-form-component base class we call reset with the intial values\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    const transformedValue = (this.transformToFormGroup((value as any) as TControl | null, {}) as unknown) as TControl;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    // this.subForm.handleFormArrayControls(transformedValue);\r\n\r\n    return super.emit(transformedValue);\r\n  }\r\n}\r\n\r\nexport class SubFormGroup<TControl, TForm = TControl> extends FormGroup {\r\n  private subForm!: NgxSubFormComponent<TControl, TForm>;\r\n\r\n  public cd: ChangeDetectorRef | undefined;\r\n  private isRoot = false;\r\n  private _valueChanges: CustomEventEmitter<TControl, TForm>;\r\n  public controlValue!: TControl;\r\n  private transformToFormGroup!: NgxSubFormComponent<TControl, TForm>['transformToFormGroup'];\r\n  private transformFromFormGroup!: NgxSubFormComponent<TControl, TForm>['transformFromFormGroup'];\r\n  private getDefaultValues!: NgxSubFormComponent<TControl, TForm>['getDefaultValues'];\r\n\r\n  public readonly parentValidatorOrOpts: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null | undefined;\r\n  public readonly parentAsyncValidator: AsyncValidatorFn | AsyncValidatorFn[] | null | undefined;\r\n\r\n  constructor(\r\n    value: Partial<TControl> | null,\r\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\r\n    //@Optional() @Inject(SUB_FORM_COMPONENT_TOKEN) public parentSubForm?: NgxSubFormComponent<any>,\r\n  ) {\r\n    // its important to NOT set validators here as this will trigger calls to value before setSubForm was called\r\n    super({});\r\n\r\n    // this is how to overwrite a propetotype property\r\n    //   Object.defineProperty(foo, \"bar\", {\r\n    //     // only returns odd die sides\r\n    //     get: function () { return (Math.random() * 6) | 1; }\r\n    // });\r\n\r\n    this.controlValue = (value || undefined) as TControl;\r\n\r\n    this._valueChanges = new CustomEventEmitter();\r\n\r\n    (this.valueChanges as any) = this._valueChanges;\r\n\r\n    this.parentValidatorOrOpts = validatorOrOpts;\r\n    this.parentAsyncValidator = asyncValidator;\r\n  }\r\n\r\n  setChangeDetector(cd: ChangeDetectorRef) {\r\n    this.cd = cd;\r\n  }\r\n\r\n  get value() {\r\n    // if (!this.subForm) {\r\n    //   return null;\r\n    // }\r\n\r\n    // const transformedValue = (this.transformFromFormGroup(\r\n    //   (super.value as any) as TForm,\r\n    // ) as unknown) as TControl;\r\n    // return transformedValue;\r\n\r\n    return this.controlValue;\r\n  }\r\n\r\n  set value(value: any) {\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    const transformedValue = (this.transformToFormGroup((value as unknown) as TControl, {}) as unknown) as TForm;\r\n\r\n    // TODO rethink as this might not work as we want it, we might not even need this anymore\r\n    // @ts-ignore\r\n    (super.value as any) = transformedValue;\r\n\r\n    this.controlValue = value;\r\n  }\r\n\r\n  setSubForm(subForm: NgxSubFormComponent<TControl, TForm>) {\r\n    this.subForm = subForm;\r\n    this._valueChanges.setSubForm(subForm);\r\n\r\n    if (this.root === this) {\r\n      this.isRoot = true;\r\n    }\r\n\r\n    // transform to form group should never return null / undefined but {} instead\r\n    this.transformToFormGroup = (obj: TControl | null, defaultValues: Partial<TForm>) => {\r\n      return this.subForm['transformToFormGroup'](obj, defaultValues) || ({} as TForm);\r\n    };\r\n    this.transformFromFormGroup = this.subForm['transformFromFormGroup'].bind(this.subForm);\r\n    this.getDefaultValues = this.subForm['getDefaultValues'].bind(this.subForm);\r\n  }\r\n\r\n  getRawValue(): any {\r\n    const rawValue = super.getRawValue();\r\n    return this.transformFromFormGroup(rawValue);\r\n  }\r\n\r\n  setValue(value: TControl, options: { onlySelf?: boolean; emitEvent?: boolean } = {}): void {\r\n    // this happens when the parent sets a value but the sub-form-component has not tun ngOnInit yet\r\n    if (!this.subForm) {\r\n      if (value) {\r\n        this.controlValue = value;\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.controlValue = { ...this.controlValue, ...value };\r\n\r\n    // TODO check if providing {} does work, as we do not want to override existing values with default values\r\n    // It might be that patchValue cannot be used as we dont have control over how transformToFormGroup is implemented\r\n    // it would have to be done in a way that returns a partial TForm which right now is not how the method signatures are defined\r\n    const transformedValue = (this.transformToFormGroup((value as unknown) as TControl, {}) as unknown) as TForm;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    this.subForm.handleFormArrayControls(this.controlValue);\r\n\r\n    super.patchValue(transformedValue, options);\r\n  }\r\n\r\n  patchValue(value: Partial<TControl>, options: { onlySelf?: boolean; emitEvent?: boolean } = {}): void {\r\n    // this happens when the parent sets a value but the sub-form-component has not tun ngOnInit yet\r\n    if (!this.subForm) {\r\n      if (value) {\r\n        this.controlValue = value as TControl;\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.controlValue = { ...this.controlValue, ...value };\r\n\r\n    // TODO check if providing {} does work, as we do not want to override existing values with default values\r\n    // It might be that patchValue cannot be used as we dont have control over how transformToFormGroup is implemented\r\n    // it would have to be done in a way that returns a partial TForm which right now is not how the method signatures are defined\r\n    const transformedValue = (this.transformToFormGroup((value as unknown) as TControl, {}) as unknown) as TForm;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    this.subForm.handleFormArrayControls(this.controlValue);\r\n\r\n    super.patchValue(transformedValue, options);\r\n  }\r\n\r\n  reset(value: Partial<TControl> = {}, options: { onlySelf?: boolean; emitEvent?: boolean } = {}): void {\r\n    // reset is triggered from parent when formgroup is created\r\n    // then again from sub-form inside ngOnInit after subForm was set\r\n    // so when can safely ignore resets prior to subForm being set\r\n    if (!this.subForm) {\r\n      if (value) {\r\n        this.controlValue = value as TControl;\r\n      }\r\n      return;\r\n    }\r\n\r\n    // special handling for array sub-forms\r\n    if (Array.isArray(value)) {\r\n      this.controlValue = (value || []) as any;\r\n    } else {\r\n      this.controlValue = { ...this.controlValue, ...value };\r\n    }\r\n\r\n    const formValue = (this.transformToFormGroup(\r\n      (value as unknown) as TControl,\r\n      this.getDefaultValues(),\r\n    ) as unknown) as TForm;\r\n\r\n    // TODO figure out how to handle for arrays\r\n    this.subForm.handleFormArrayControls(this.controlValue);\r\n\r\n    super.reset(formValue, options);\r\n\r\n    // const controlValue = (this.transformFromFormGroup((value as unknown) as TForm) as unknown) as TControl;\r\n  }\r\n\r\n  private getControlValue(control: AbstractControl): any {\r\n    if (control instanceof SubFormGroup) {\r\n      return control.controlValue;\r\n    } else if (control instanceof SubFormArray) {\r\n      return control.controls.map(arrayElementControl => this.getControlValue(arrayElementControl));\r\n    } else {\r\n      return control.value;\r\n    }\r\n  }\r\n\r\n  updateValue(options: any) {\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    const formValue = {} as any;\r\n    for (const [key, value] of Object.entries(this.subForm.formGroup.controls)) {\r\n      const control = value as AbstractControl;\r\n      formValue[key] = this.getControlValue(control);\r\n    }\r\n\r\n    const controlValue = (this.transformFromFormGroup(formValue || ({} as TForm)) as unknown) as TControl;\r\n\r\n    this.controlValue = controlValue;\r\n\r\n    if (this.isRoot) {\r\n      return;\r\n    }\r\n\r\n    let parentSubFromGroup: any;\r\n    // if (this.parent instanceof FormArray) {\r\n    //   parentSubFromGroup = this.parent.parent;\r\n    // } else {\r\n    parentSubFromGroup = this.parent;\r\n    //}\r\n\r\n    if (!parentSubFromGroup) {\r\n      debugger;\r\n    }\r\n\r\n    parentSubFromGroup.updateValue(options);\r\n    //this.updateValueAndValidity(options);\r\n  }\r\n}\r\n\r\n// this idea of this is that when a non sub form group is being updated the sub form group needs to be notifed\r\nexport function patchFormControl<TControl, TForm>(subFormGroup: SubFormGroup<TControl, TForm>, control: FormControl) {\r\n  const patchableControl = control as FormControl & { isPatched: boolean };\r\n\r\n  if (!patchableControl.isPatched) {\r\n    const setValue = patchableControl.setValue.bind(patchableControl);\r\n    patchableControl.setValue = (value: any, options: any) => {\r\n      setValue(value, options);\r\n      subFormGroup.updateValue(options);\r\n    };\r\n    patchableControl.isPatched = true;\r\n  }\r\n}\r\n\r\nexport class SubFormArray<TControl, TForm = TControl> extends FormArray {\r\n  private subForm!: NgxSubFormComponent<TControl, TForm>;\r\n\r\n  private isRoot = false;\r\n  private _valueChanges: CustomEventEmitter<TControl, TForm>;\r\n  //public controlValue!: TControl[];\r\n  private transformToFormGroup!: NgxSubFormComponent<TControl, TForm>['transformToFormGroup'];\r\n  private transformFromFormGroup!: NgxSubFormComponent<TControl, TForm>['transformFromFormGroup'];\r\n  private getDefaultValues!: NgxSubFormComponent<TControl, TForm>['getDefaultValues'];\r\n\r\n  public readonly parentValidatorOrOpts: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null | undefined;\r\n  public readonly parentAsyncValidator: AsyncValidatorFn | AsyncValidatorFn[] | null | undefined;\r\n\r\n  constructor(\r\n    subForm: NgxSubFormComponent<TControl, TForm>,\r\n    controls: AbstractControl[],\r\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\r\n  ) {\r\n    // its important to NOT set validators here as this will trigger calls to value before setSubForm was called\r\n    super(controls);\r\n\r\n    this._valueChanges = new CustomEventEmitter();\r\n    (this.valueChanges as any) = this._valueChanges;\r\n\r\n    this.parentValidatorOrOpts = validatorOrOpts;\r\n    this.parentAsyncValidator = asyncValidator;\r\n\r\n    this.setSubForm(subForm);\r\n  }\r\n\r\n  setSubForm(subForm: NgxSubFormComponent<TControl, TForm>) {\r\n    this.subForm = subForm;\r\n    this._valueChanges.setSubForm(subForm);\r\n\r\n    // for some reason root is not properly set for form array\r\n    // on the other hand form array should never be root anyway so we can ignore thsi for now\r\n    // if (this.root === this) {\r\n    //   this.isRoot = true;\r\n    // }\r\n\r\n    // transform to form group should never return null / undefined but {} instead\r\n    this.transformToFormGroup = (obj: TControl | null, defaultValues: Partial<TForm>) => {\r\n      return this.subForm['transformToFormGroup'](obj, defaultValues) || ({} as TForm);\r\n    };\r\n    this.transformFromFormGroup = this.subForm['transformFromFormGroup'].bind(this.subForm);\r\n    this.getDefaultValues = this.subForm['getDefaultValues'].bind(this.subForm);\r\n  }\r\n\r\n  setValue(value: any, options: any) {\r\n    super.setValue(value, options);\r\n    ((this.subForm.formGroup as unknown) as SubFormGroup<any>).updateValue(options);\r\n  }\r\n\r\n  patchValue(value: any, options: any) {\r\n    super.patchValue(value, options);\r\n    ((this.subForm.formGroup as unknown) as SubFormGroup<any>).updateValue(options);\r\n  }\r\n\r\n  updateValue(options: any) {\r\n    if (!this.subForm) {\r\n      return;\r\n    }\r\n\r\n    (this.parent as any).updateValue(options);\r\n    //this.updateValueAndValidity(options);\r\n  }\r\n\r\n  removeAt(index: number): void {\r\n    super.removeAt(index);\r\n    ((this.subForm.formGroup as unknown) as SubFormGroup<any>).updateValue(undefined);\r\n  }\r\n}\r\n","// The following code is copied from angular source since those methods tehy are not exported\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AbstractControlOptions,\r\n  AsyncValidator,\r\n  AsyncValidatorFn,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\n\r\n// https://github.com/angular/angular/blob/0075017b43a37d06780cc245c3326212d15fd6bd/packages/forms/src/directives/shared.ts\r\nfunction composeValidators(validators: Array<Validator | ValidatorFn>): ValidatorFn | null {\r\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\r\n}\r\nfunction composeAsyncValidators(validators: Array<AsyncValidator | AsyncValidatorFn>): AsyncValidatorFn | null {\r\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;\r\n}\r\n\r\nfunction normalizeValidator(validator: ValidatorFn | Validator): ValidatorFn {\r\n  // thorws error in latest typescript version\r\n  //if ((<Validator>validator).validate) {\r\n  if ((<any>validator).validate) {\r\n    return (c: AbstractControl) => (<Validator>validator).validate(c);\r\n  } else {\r\n    return <ValidatorFn>validator;\r\n  }\r\n}\r\n\r\nfunction normalizeAsyncValidator(validator: AsyncValidatorFn | AsyncValidator): AsyncValidatorFn {\r\n  // thorws error in latest typescript version\r\n  //if ((<AsyncValidator>validator).validate) {\r\n  if ((<any>validator).validate) {\r\n    return (c: AbstractControl) => (<AsyncValidator>validator).validate(c);\r\n  } else {\r\n    return <AsyncValidatorFn>validator;\r\n  }\r\n}\r\n\r\n// https://github.com/angular/angular/blob/0075017b43a37d06780cc245c3326212d15fd6bd/packages/forms/src/model.ts\r\nfunction isOptionsObj(validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null): boolean {\r\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';\r\n}\r\nexport function coerceToValidator(\r\n  validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n): ValidatorFn | null {\r\n  const validator = (isOptionsObj(validatorOrOpts)\r\n    ? (validatorOrOpts as AbstractControlOptions).validators\r\n    : validatorOrOpts) as ValidatorFn | ValidatorFn[] | null;\r\n\r\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\r\n}\r\n\r\nexport function coerceToAsyncValidator(\r\n  asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\r\n  validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n): AsyncValidatorFn | null {\r\n  const origAsyncValidator = (isOptionsObj(validatorOrOpts)\r\n    ? (validatorOrOpts as AbstractControlOptions).asyncValidators\r\n    : asyncValidator) as AsyncValidatorFn | AsyncValidatorFn | null;\r\n\r\n  return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) : origAsyncValidator || null;\r\n}\r\n","import { AfterContentChecked, Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  AbstractControlOptions,\r\n  AsyncValidatorFn,\r\n  FormArray,\r\n  FormControl,\r\n  ValidatorFn,\r\n} from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { coerceToAsyncValidator, coerceToValidator } from './abstract-control-utils';\r\nimport {\r\n  ArrayPropertyKey,\r\n  ControlMap,\r\n  Controls,\r\n  ControlsNames,\r\n  ControlsType,\r\n  isNullOrUndefined,\r\n  TypedAbstractControl,\r\n} from './ngx-sub-form-utils';\r\nimport { FormGroupOptions, NgxFormWithArrayControls, TypedSubFormGroup } from './ngx-sub-form.types';\r\nimport { patchFormControl, SubFormGroup } from './sub-form-group';\r\n\r\ntype MapControlFunction<FormInterface, MapValue> = (ctrl: AbstractControl, key: keyof FormInterface) => MapValue;\r\ntype FilterControlFunction<FormInterface> = (\r\n  ctrl: TypedAbstractControl<any>,\r\n  key: keyof FormInterface,\r\n  isCtrlWithinFormArray: boolean,\r\n) => boolean;\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxSubFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  implements OnChanges, AfterContentChecked {\r\n  // when developing the lib it's a good idea to set the formGroup type\r\n  // to current + `| undefined` to catch a bunch of possible issues\r\n  // see @note form-group-undefined\r\n\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('subForm') formGroup!: TypedSubFormGroup<ControlInterface, FormInterface>;\r\n\r\n  protected emitNullOnDestroy = true;\r\n  protected emitInitialValueOnInit = true;\r\n\r\n  // can't define them directly\r\n  protected abstract getFormControls(): Controls<FormInterface>;\r\n\r\n  public get formControlNames(): ControlsNames<FormInterface> {\r\n    // see @note form-group-undefined for as syntax\r\n    return this.mapControls(\r\n      (_, key) => key,\r\n      () => true,\r\n      false,\r\n    ) as ControlsNames<FormInterface>;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (\r\n      changes['dataInput'] === undefined &&\r\n      (changes['formGroup'] === undefined || (changes['formGroup'].firstChange && !changes['formGroup'].currentValue))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (!this.formGroup) {\r\n      throw new Error('The subForm input was not provided but is required.');\r\n    }\r\n\r\n    if (!(this.formGroup instanceof SubFormGroup)) {\r\n      throw new Error('The subForm input needs to be of type SubFormGroup.');\r\n    }\r\n\r\n    const dataInputHasChanged = changes['dataInput'] !== undefined\r\n    this._initializeFormGroup(dataInputHasChanged);\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    // TODO this runs too often, find out of this can be triggered differently\r\n    // checking if the form group has a change detector (root forms might not)\r\n    if (this.formGroup?.cd) {\r\n      // if this is the root form\r\n      // OR if ist a sub form but the root form does not have a change detector\r\n      // we need to actually run change detection vs just marking for check\r\n      if (!this.formGroup.parent) {\r\n        this.formGroup.cd.detectChanges();\r\n      } else {\r\n        this.formGroup.cd.markForCheck();\r\n      }\r\n    }\r\n  }\r\n\r\n  // is usually called by ngOnChanges\r\n  // but if root form is used without input attributes ngOnChanges might not be called\r\n  // hence if it wasn't called yet it is called from ngOnInit in root form\r\n  protected _initializeFormGroup(dataInputHasChanged: boolean = false) {\r\n    Object.keys(this.formGroup.controls).forEach(key => {\r\n      this.formGroup.removeControl(key);\r\n    });\r\n\r\n    const subForm = this.formGroup;\r\n\r\n    const controls = this.getFormControls();\r\n    for (const key in controls) {\r\n      if (controls.hasOwnProperty(key)) {\r\n        const control = controls[key];\r\n\r\n        // we need to wire up the form controls with the sub form group\r\n        // this allows us to transform the sub form value to ControlInterface\r\n        // every time any of the form controls on the sub form change\r\n        if (control instanceof FormControl) {\r\n          patchFormControl(subForm, control);\r\n        }\r\n\r\n        this.formGroup.addControl(key, control);\r\n      }\r\n    }\r\n\r\n    // connect sub form group with current sub-form-component\r\n    subForm.setSubForm(this);\r\n\r\n    const options = this.getFormGroupControlOptions() as AbstractControlOptions;\r\n\r\n    const validators: ValidatorFn[] = [];\r\n    const asyncValidators: AsyncValidatorFn[] = [];\r\n\r\n    // get validators that were passed into the sub form group on the parent\r\n    if (subForm.parentValidatorOrOpts) {\r\n      const validator = coerceToValidator(subForm.parentValidatorOrOpts);\r\n      if (validator) {\r\n        validators.push(validator);\r\n      }\r\n    }\r\n\r\n    // get async validators that were passed into the sub form group on the parent\r\n    if (subForm.parentAsyncValidator) {\r\n      const validator = coerceToAsyncValidator(subForm.parentAsyncValidator);\r\n      if (validator) {\r\n        asyncValidators.push(validator);\r\n      }\r\n    }\r\n\r\n    // handle AbstractControlOptions from getFormGroupControlOptions\r\n    if (options) {\r\n      if (options.updateOn) {\r\n        // sadly there is no public metohd that lets us change the update strategy of an already created FormGroup\r\n        (this.formGroup as any)._setUpdateStrategy(options.updateOn);\r\n      }\r\n\r\n      if (options.validators) {\r\n        const validator = coerceToValidator(options.validators);\r\n        if (validator) {\r\n          validators.push(validator);\r\n        }\r\n      }\r\n\r\n      if (options.asyncValidators) {\r\n        const validator = coerceToAsyncValidator(options.asyncValidators);\r\n        if (validator) {\r\n          asyncValidators.push(validator);\r\n        }\r\n      }\r\n    }\r\n\r\n    // set validators / async validators on sub form group\r\n    if (validators.length > 0) {\r\n      this.formGroup.setValidators(validators);\r\n    }\r\n    if (asyncValidators.length > 0) {\r\n      this.formGroup.setAsyncValidators(asyncValidators);\r\n    }\r\n\r\n    // if the form has default values, they should be applied straight away\r\n    const defaultValues: Partial<FormInterface> | null = this.getDefaultValues();\r\n\r\n    // get default values for reset, if null fallback to undefined as there si a difference when calling reset\r\n    const transformedValue = this.transformFromFormGroup(defaultValues as FormInterface) || undefined;\r\n    // since this is the initial setting of form values do NOT emit an event\r\n\r\n    let mergedValues: ControlInterface;\r\n    if (Array.isArray(transformedValue)) {\r\n      mergedValues = subForm.controlValue;\r\n    } else {\r\n      const controlValue = (dataInputHasChanged ? (this as any)['dataInput'] : subForm.controlValue) || {};\r\n      mergedValues = { ...transformedValue, ...controlValue } as ControlInterface;\r\n    }\r\n\r\n    const formValue = this.transformToFormGroup(mergedValues, {});\r\n    this.handleFormArrayControls(formValue);\r\n\r\n    // self = false is critical here\r\n    // this allows the parent form to re-evaluate its status after each of its sub form has completed intialization\r\n    // we actually only need to call this on the deepest sub form in a tree (leaves)\r\n    // but there is no way to identify if there are sub forms on the current form + that are also rendered\r\n    // as only when sub forms are rendered the on changes method on the sub form is executed\r\n\r\n    // TODO decide if we want to emit an event when input control value != control value after intialization\r\n    // this happens for example when null is passed in but default values change the value of the inner form\r\n    this.formGroup.reset(mergedValues, { onlySelf: false, emitEvent: false });\r\n  }\r\n\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n    filterControl: FilterControlFunction<FormInterface>,\r\n    recursiveIfArray: boolean,\r\n  ): Partial<ControlMap<FormInterface, MapValue | MapValue[]>> | null;\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n  ): ControlMap<FormInterface, MapValue | MapValue[]> | null;\r\n  private mapControls<MapValue>(\r\n    mapControl: MapControlFunction<FormInterface, MapValue>,\r\n    filterControl: FilterControlFunction<FormInterface> = () => true,\r\n    recursiveIfArray: boolean = true,\r\n  ): Partial<ControlMap<FormInterface, MapValue | MapValue[]>> | null {\r\n    if (!this.formGroup) {\r\n      return null;\r\n    }\r\n\r\n    const formControls: ControlsType<FormInterface> = this.formGroup.controls;\r\n\r\n    const controls: Partial<ControlMap<FormInterface, MapValue | MapValue[]>> = {};\r\n\r\n    for (const key in formControls) {\r\n      if (this.formGroup.controls.hasOwnProperty(key)) {\r\n        const control = formControls[key];\r\n\r\n        if (recursiveIfArray && control instanceof FormArray) {\r\n          const values: MapValue[] = [];\r\n\r\n          for (let i = 0; i < control.length; i++) {\r\n            if (filterControl(control.at(i), key, true)) {\r\n              values.push(mapControl(control.at(i), key));\r\n            }\r\n          }\r\n\r\n          if (values.length > 0 && values.some(x => !isNullOrUndefined(x))) {\r\n            controls[key] = values;\r\n          }\r\n        } else if (control && filterControl(control, key, false)) {\r\n          controls[key] = mapControl(control, key);\r\n        }\r\n      }\r\n    }\r\n\r\n    return controls;\r\n  }\r\n\r\n  /**\r\n   * Extend this method to provide custom local FormGroup level validation\r\n   */\r\n  protected getFormGroupControlOptions(): FormGroupOptions<FormInterface> {\r\n    return {};\r\n  }\r\n\r\n  // when getDefaultValues is defined, you do not need to specify the default values\r\n  // in your form (the ones defined within the `getFormControls` method)\r\n  protected getDefaultValues(): Partial<FormInterface> {\r\n    return {};\r\n  }\r\n\r\n  public handleFormArrayControls(obj: any) {\r\n    // TODO check if this can still happen, it appreaded during development. might alerady be fixed\r\n    if (!this.formGroup) {\r\n      return;\r\n    }\r\n\r\n    Object.entries(obj).forEach(([key, value]) => {\r\n      if (this.formGroup.get(key) instanceof FormArray && Array.isArray(value)) {\r\n        const formArray: FormArray = this.formGroup.get(key) as FormArray;\r\n\r\n        // instead of creating a new array every time and push a new FormControl\r\n        // we just remove or add what is necessary so that:\r\n        // - it is as efficient as possible and do not create unnecessary FormControl every time\r\n        // - validators are not destroyed/created again and eventually fire again for no reason\r\n        while (formArray.length > value.length) {\r\n          formArray.removeAt(formArray.length - 1);\r\n        }\r\n\r\n        for (let i = formArray.length; i < value.length; i++) {\r\n          if (this.formIsFormWithArrayControls()) {\r\n            formArray.insert(i, this.createFormArrayControl(key as ArrayPropertyKey<FormInterface>, value[i]));\r\n          } else {\r\n            const control = new FormControl(value[i]);\r\n            patchFormControl(this.formGroup, control);\r\n            formArray.insert(i, control);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private formIsFormWithArrayControls(): this is NgxFormWithArrayControls<FormInterface> {\r\n    return typeof ((this as unknown) as NgxFormWithArrayControls<FormInterface>).createFormArrayControl === 'function';\r\n  }\r\n\r\n  // when customizing the emission rate of your sub form component, remember not to **mutate** the stream\r\n  // it is safe to throttle, debounce, delay, etc but using skip, first, last or mutating data inside\r\n  // the stream will cause issues!\r\n  public handleEmissionRate(): (obs$: Observable<ControlInterface | null>) => Observable<ControlInterface | null> {\r\n    return obs$ => obs$;\r\n  }\r\n\r\n  // that method can be overridden if the\r\n  // shape of the form needs to be modified\r\n  protected transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null {\r\n    return (obj as any) as FormInterface;\r\n  }\r\n\r\n  // that method can be overridden if the\r\n  // shape of the form needs to be modified\r\n  protected transformFromFormGroup(formValue: FormInterface): ControlInterface | null {\r\n    return (formValue as any) as ControlInterface;\r\n  }\r\n}\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxSubFormRemapComponent<ControlInterface, FormInterface> extends NgxSubFormComponent<\r\n  ControlInterface,\r\n  FormInterface\r\n> {\r\n  protected abstract transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null;\r\n  protected abstract transformFromFormGroup(formValue: FormInterface): ControlInterface | null;\r\n}\r\n","import { ChangeDetectorRef, Directive, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport isEqual from 'fast-deep-equal';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\nimport { isNullOrUndefined, takeUntilDestroyed } from './ngx-sub-form-utils';\r\nimport { NgxSubFormRemapComponent } from './ngx-sub-form.component';\r\nimport { TypedSubFormGroup } from './ngx-sub-form.types';\r\nimport { SubFormGroup } from './sub-form-group';\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxRootFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  extends NgxSubFormRemapComponent<ControlInterface, FormInterface>\r\n  implements OnInit, OnDestroy, OnChanges {\r\n  public abstract dataInput: Required<ControlInterface> | null | undefined;\r\n\r\n  public abstract dataOutput: EventEmitter<ControlInterface>;\r\n  // using a private variable `_dataOutput$` to be able to control the\r\n  // emission rate with a debounce or throttle for ex\r\n  /** @internal */\r\n  protected _dataOutput$: Subject<ControlInterface> = new Subject();\r\n\r\n  protected emitInitialValueOnInit = false;\r\n  protected emitNullOnDestroy = false;\r\n\r\n  protected dataValue: ControlInterface | null = null;\r\n\r\n  private formGroupInitialized = false;\r\n\r\n  // change detector only needs to be passed from root form\r\n  // for sub forms the sub-form-directive injects the change detector ref for us\r\n  constructor(cd: ChangeDetectorRef) {\r\n    super();\r\n    this.formGroup = new SubFormGroup<ControlInterface, FormInterface>({}) as TypedSubFormGroup<\r\n      ControlInterface,\r\n      FormInterface\r\n    >;\r\n\r\n    if (cd) {\r\n      this.formGroup.setChangeDetector(cd);\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    if (!this.formGroupInitialized) {\r\n      this._initializeFormGroup();\r\n      this.formGroupInitialized = true;\r\n    }\r\n\r\n    this._dataOutput$\r\n      .pipe(\r\n        takeUntilDestroyed(this),\r\n        filter(() => this.formGroup.valid),\r\n        tap(value => this.dataOutput.emit(value)),\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n    this.formGroupInitialized = true;\r\n  }\r\n\r\n  // needed for take until destroyed\r\n  ngOnDestroy(): void {}\r\n\r\n  /** @internal */\r\n  protected onRegisterOnChangeHook(data: ControlInterface | null): boolean {\r\n    if (this.formGroup.invalid || isEqual(data, this.dataInput)) {\r\n      return false;\r\n    }\r\n\r\n    this.dataValue = data;\r\n    return true;\r\n  }\r\n\r\n  protected transformToFormGroup(\r\n    obj: ControlInterface | null,\r\n    defaultValues: Partial<FormInterface> | null,\r\n  ): FormInterface | null {\r\n    return (obj as unknown) as FormInterface;\r\n  }\r\n\r\n  protected transformFromFormGroup(formValue: FormInterface): ControlInterface | null {\r\n    return (formValue as unknown) as ControlInterface;\r\n  }\r\n\r\n  public manualSave(): void {\r\n    // if (this.formGroup.valid) {\r\n    //   this.dataValue = this.formGroup.controlValue;\r\n    //   this._dataOutput$.next(this.dataValue);\r\n    // }\r\n    this.dataValue = this.formGroup.controlValue as ControlInterface;\r\n    if (!isNullOrUndefined(this.dataValue) && this.formGroup.valid) {\r\n      this._dataOutput$.next(this.dataValue);\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, startWith, tap } from 'rxjs/operators';\r\n\r\nimport { NgxRootFormComponent } from './ngx-root-form.component';\r\nimport { takeUntilDestroyed } from './ngx-sub-form-utils';\r\n\r\ntype FormGroupStatus = 'DISABLED' | 'PENDING' | 'INVALID' | 'VALID';\r\n\r\n@Directive()\r\n// tslint:disable-next-line: directive-class-suffix\r\nexport abstract class NgxAutomaticRootFormComponent<ControlInterface, FormInterface = ControlInterface>\r\n  extends NgxRootFormComponent<ControlInterface, FormInterface>\r\n  implements OnInit, OnDestroy {\r\n  constructor(cd: ChangeDetectorRef) {\r\n    super(cd);\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    const status$ = this.formGroup.statusChanges.pipe(startWith(this.formGroup.status)) as Observable<FormGroupStatus>;\r\n\r\n    const value$ = this.formGroup.valueChanges.pipe(startWith(this.formGroup.value));\r\n\r\n    combineLatest([status$, value$])\r\n      .pipe(\r\n        takeUntilDestroyed(this),\r\n        filter(([status, value]) => status === 'VALID'),\r\n        tap(() => this.manualSave()),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { SubFormGroup } from './sub-form-group';\r\n\r\n@Directive({\r\n  selector: '[subForm]',\r\n})\r\nexport class SubFormDirective<TControl, TForm> implements OnChanges {\r\n  @Input() subForm!: SubFormGroup<TControl, TForm>;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.subForm && this.subForm) {\r\n      this.subForm.setChangeDetector(this.cd);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SubFormDirective } from './sub-form.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SubFormDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,    \r\n  ],\r\n  exports: [\r\n    SubFormDirective\r\n  ]\r\n})\r\nexport class NgxSubFormModule { }\r\n","/*\r\n * Public API Surface of sub-form\r\n */\r\n\r\nexport * from './lib/ngx-sub-form-utils';\r\nexport * from './lib/sub-form-group';\r\nexport * from './lib/ngx-sub-form.component';\r\nexport * from './lib/ngx-root-form.component';\r\nexport * from './lib/ngx-automatic-root-form.component';\r\nexport * from './lib/ngx-sub-form.types';\r\nexport * from './lib/sub-form.directive';\r\nexport * from './lib/ngx-sub-form.module';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {SUB_FORM_COMPONENT_TOKEN as ɵa} from './lib/ngx-sub-form-tokens';"],"names":[],"mappings":"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"}